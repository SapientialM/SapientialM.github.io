<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用 pytorch 创建一个神经网络</title>
      <link href="/2024/07/01/Deep-Learning/create_neural_network/"/>
      <url>/2024/07/01/Deep-Learning/create_neural_network/</url>
      
        <content type="html"><![CDATA[<h1 id="构建神经网络">构建神经网络</h1><h2 id="1-导入所需包">1 导入所需包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br></pre></td></tr></table></figure><h2 id="2-检查gpu是否可用">2 检查GPU是否可用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = (</span><br><span class="line">    <span class="string">&quot;cuda&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;mps&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.backends.mps.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Using <span class="subst">&#123;device&#125;</span> device&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda)</span><br></pre></td></tr></table></figure><pre><code>Using cuda device2.2.2+cu121True12.1</code></pre><p>如果发现GPU不可用，可能是因为torch版本问题（比如我），应该去下载GPU版本。</p><ul><li>在CUDA官网找到合适版本的<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">cuda</a>，一般是根据系统平台和显卡版本来选择所需CUDA</li><li>查看安装完成是否</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本，看CUDA的版本，比如我的是cuda_11.2</span></span><br><span class="line">nvcc --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">驱动，看Driver Version</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><ul><li>去PyTorch官网找到合适版本的<a href="https://pytorch.org/get-started/previous-versions/">PyTorch</a>，一般是根据开发环境来选择，然后复制所给的Commond去shell下安装即可</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如我的命令就是</span></span><br><span class="line">pip install torch==2.2.2 torchvision==0.17.2 torchaudio==2.2.2 --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure><h2 id="3-定义我们的神经网络">3 定义我们的神经网络</h2><p>pytorch里面一切自定义操作基本上都是继承<code>nn.Module</code>类来实现的，你可以先不去深入了解这个类，但是要知道，我们一般都是通过继承和重构<code>nn.Module</code>来定义我们的神经网络。我们一般重构<code>__init__</code>和<code>forward</code>这两个方法。根据PyTorch官网的说法：<code>__init__</code>初始化神经网络层；<code>forward</code>层之间的数据操作，也是整个网络的核心。<code>__init__</code>只会定义层，而<code>forward</code>负责将层连接起来。实际上类的初始化参数一般是一些<code>固有属性</code>，我们可以将一些带有训练参数的层放在<code>__init__</code>，而没有训练参数的层是可以加入到<code>forward</code>里面的，或者说我们将没有训练参数的层看作是层之间的数据操作。</p><p>当然直接这么说，肯定不是很清晰，我们来看一个官网给的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line">model = NeuralNetwork().to(device) <span class="comment"># 将网络移入device，并打印结构</span></span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><pre><code>NeuralNetwork(  (flatten): Flatten(start_dim=1, end_dim=-1)  (linear_relu_stack): Sequential(    (0): Linear(in_features=784, out_features=512, bias=True)    (1): ReLU()    (2): Linear(in_features=512, out_features=512, bias=True)    (3): ReLU()    (4): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><p>我们用torchviz可以将神经网络进行一个简单的可视化，当然很多参数可选，这里不一一列举</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torchviz</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torchviz <span class="keyword">import</span> make_dot</span><br><span class="line">X = torch.rand(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, device=device) <span class="comment"># 需要对神经网络进行数据输入，才是一个完整的网络</span></span><br><span class="line">y = model(X)</span><br><span class="line">output = make_dot(y.mean(), params=<span class="built_in">dict</span>(model.named_parameters())) <span class="comment"># 开始绘制</span></span><br><span class="line">output.<span class="built_in">format</span> = <span class="string">&quot;png&quot;</span></span><br><span class="line">output.directory = <span class="string">&quot;.&quot;</span></span><br><span class="line">output.render(<span class="string">&quot;torchviz&quot;</span>, view=<span class="literal">True</span>) <span class="comment"># 会在相对路径下保存一个可视化后的图片并打开</span></span><br></pre></td></tr></table></figure><pre><code>'torchviz.png'</code></pre><p>看起来可能会比较复杂，也看不懂，我们得需要学会看懂神经网络的结构才能看懂结构图。当然，还有诸如draw_convnet、NNSVG、netron等可视化工具会更加优秀。</p><h2 id="4-神经网络模型层">4 神经网络模型层</h2><p>想要构建一个神经网络并进行训练和预测，我们需要去认识神经网络的构成。假定你已经了解过感知机、人工神经网络的基本概念，那么现在就是来了解一下神经网络的模型层。</p><p>我们直接分解一下官网所给出的这个模型，这是一个简单的前馈神经网络（Feedforward Neural Network），我们先不去了解它的作用，一点点的分解它，看看它最终实现了什么。</p><p>我们先根据官网所说的，取一个大小为 28x28 的 3 张图像的样本小批量作为输入（我们一般将数据的第一个维度看作批量维度并保留）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_image = torch.rand(<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">print</span>(input_image.size())</span><br></pre></td></tr></table></figure><pre><code>torch.Size([3, 28, 28])</code></pre><h3 id="4-1-nn-flatten">4.1 nn.Flatten</h3><p>虽然是PyTorch的<code>nn.Flatten</code>，但是Flatten层是神经网络中常见的组成部分。在神经网络的训练和预测过程中，输入数据通常需要经过一系列的处理和转换。在这个过程中，Flatten层能够将多维的输入数据转化为一维的线性形式，以便于神经网络的进一步处理。模型中的<code>nn.Flatten</code>，将我们所输入的2D 28*28 图像转换为一个包含 784 个像素值的连续数组，也就是和它表面的意思一样展平这个高维数组。</p><blockquote><p>（<code>nn.Flatten()</code>默认参数是<code>start_dim=1</code>和<code>end_dim=-1</code>，如果你想展平所有维度，可以通过设置<code>start_dim=0</code>来实现）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flatten = nn.Flatten()</span><br><span class="line">flat_image = flatten(input_image) <span class="comment"># 将输入的图像展平</span></span><br><span class="line"><span class="built_in">print</span>(flat_image.size())</span><br></pre></td></tr></table></figure><pre><code>torch.Size([3, 784])</code></pre><p>在卷积神经网络（CNN）中，<code>Flatten</code>层可以将卷积层提取到的特征图展平，便于进一步的特征处理或分类，也便于输入到全连接层（全连接层通常需要一维的输入，后面会讲到）。在构建复杂网络时，<code>Flatten</code>层可以帮助不同类型的层之间进行连接。总的来说，<code>Flatten</code>层起到了桥梁的作用，使得卷积神经网络的层次结构更加灵活和易于设计，并且确保了从卷积层到全连接层的数据传递顺畅，维持了网络的整体性能和效率。</p><h3 id="4-2-nn-linear">4.2 nn.Linear</h3><p><code>nn.Linear</code>应该耳熟能详，我们称之为线性层（Linear Layer），也可以称为全连接层（Fully Connected Layer）或密集层（Dense Layer）。线性层是一个使用其存储的权重和偏差对输入应用线性变换的模块，也就是对输入数据进行线性变换。线性层对数据的处理方式基本上可以表示为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = Wx + b </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p><p>，其中 W 是权重矩阵，b 是偏置。向量都是可学习的参数。在神经网络的训练和预测过程中，<code>Linear</code>层的作用是将输入数据通过一组权重进行线性变换，然后添加一个偏置项。简单来说，它能够将输入特征映射到输出特征，从而实现对数据的线性组合和转换。如下图是一个单隐藏层的多层感知机（Multilayer Perceptron），一般称为MLP，隐藏层和输出层均是由线性层和激活函数组成：</p><p><img src="/images/DL-pics/create_neural_network_files/MLP.png#pic_center" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个线性层，将28*28维度的向量转换为20维度的向量</span></span><br><span class="line">layer1 = nn.Linear(in_features=<span class="number">28</span>*<span class="number">28</span>, out_features=<span class="number">20</span>)</span><br><span class="line">hidden1 = layer1(flat_image) </span><br><span class="line"><span class="built_in">print</span>(hidden1.size())</span><br></pre></td></tr></table></figure><pre><code>torch.Size([3, 20])</code></pre><blockquote><p>在这个例子中，in_features=28*28表示输入特征的维度，out_features=20表示输出特征的维度。nn.Linear层会自动初始化权重和偏置，并在训练过程中通过<strong>反向传播算法</strong>进行调整。简单理解就是，该线性层的输入是784维，而输出是20维。</p></blockquote><h3 id="4-3-nn-relu">4.3 nn.ReLU</h3><p>ReLU函数，全称Rectified Linear Unit，是人工神经网络中常用的一种激活函数.<br>讲到这里，我们就讲讲常见的激活函数及其作用。</p><h4 id="sigmoid-激活函数">Sigmoid 激活函数</h4><p><strong>数学表达式：</strong></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sigma(x) = \frac{1}{1 + e^{-x}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.697331em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>作用：</strong></p><ul><li>将输入映射到 (0, 1) 之间。</li><li>常用于输出层，尤其是在二分类问题中，输出概率值。</li></ul><p><strong>优点：</strong></p><ul><li>输出范围在 (0, 1) 之间，可以解释为概率。</li><li>平滑梯度，有助于梯度下降。</li></ul><p><strong>缺点：</strong></p><ul><li>容易导致梯度消失问题。</li><li>输出不是零中心的，会影响网络的训练效率。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;Sigmoid Activation Function&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Sigmoid(x)&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_20_0.png#pic_center" alt="png"></p><h4 id="tanh-激活函数">Tanh 激活函数</h4><p><strong>数学表达式：</strong></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>tanh</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\tanh(x) = \frac{e^x - e^{-x}}{e^x + e^{-x}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tanh</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.217661em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.448331em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.697331em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>作用：</strong></p><ul><li>将输入映射到 (-1, 1) 之间。</li><li>常用于隐藏层，提供零中心的输出，有助于训练。</li></ul><p><strong>优点：</strong></p><ul><li>输出是零中心的，梯度消失问题较轻。</li></ul><p><strong>缺点：</strong></p><ul><li>仍然存在梯度消失问题。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tanh</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = tanh(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;Tanh Activation Function&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Tanh(x)&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_22_0.png#pic_center" alt="png"></p><h4 id="relu-rectified-linear-unit-激活函数">ReLU (Rectified Linear Unit) 激活函数</h4><p><strong>数学表达式：</strong></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>ReLU</mtext><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{ReLU}(x) = \max(0, x) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">ReLU</span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p><p><strong>作用：</strong></p><ul><li>将输入小于0的部分设为0，大于0的部分保持不变。</li><li>常用于隐藏层，特别是深度神经网络。</li></ul><p><strong>优点：</strong></p><ul><li>计算简单，收敛速度快。</li><li>减少梯度消失问题。</li></ul><p><strong>缺点：</strong></p><ul><li>输出不是零中心的。</li><li>输入小于0时梯度为零，可能导致“神经元死亡”问题。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = relu(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;ReLU Activation Function&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;ReLU(x)&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_24_0.png#pic_center" alt="png"></p><h4 id="leaky-relu-激活函数">Leaky ReLU 激活函数</h4><p><strong>数学表达式：</strong></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Leaky ReLU</mtext><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>α</mi><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> \text{Leaky ReLU}(x) = \begin{cases}       x &amp; \text{if } x &gt; 0 \\      \alpha x &amp; \text{if } x \leq 0    \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Leaky ReLU</span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中 (\alpha) 通常是一个很小的常数，如 0.01。</p><p><strong>作用：</strong></p><ul><li>解决 ReLU 的“神经元死亡”问题。</li></ul><p><strong>优点：</strong></p><ul><li>输入小于0时仍有较小梯度，避免神经元死亡。</li></ul><p><strong>缺点：</strong></p><ul><li>计算稍复杂。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leaky_relu</span>(<span class="params">x, alpha=<span class="number">0.01</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x, alpha * x)</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = leaky_relu(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;Leaky ReLU Activation Function&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Leaky ReLU(x)&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_26_0.png#pic_center" alt="png"></p><h4 id="softmax-激活函数">Softmax 激活函数</h4><p><strong>数学表达式：</strong></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Softmax</mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>x</mi><mi>i</mi></msub></msup><mrow><munder><mo>∑</mo><mi>j</mi></munder><msup><mi>e</mi><msub><mi>x</mi><mi>j</mi></msub></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{Softmax}(x_i) = \frac{e^{x_i}}{\sum_{j} e^{x_j}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Softmax</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.46321em;vertical-align:-1.1218180000000002em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6064620000000001em;"><span style="top:-3.0050700000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1218180000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>作用：</strong></p><ul><li>将输入向量转换为概率分布，总和为1。</li><li>常用于多分类问题的输出层。</li></ul><p><strong>优点：</strong></p><ul><li>输出可以解释为概率，便于分类。</li></ul><p><strong>缺点：</strong></p><ul><li>计算相对复杂，容易导致数值不稳定。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">x</span>):</span><br><span class="line">    e_x = np.exp(x - np.<span class="built_in">max</span>(x))</span><br><span class="line">    <span class="keyword">return</span> e_x / e_x.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = softmax(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;Softmax Activation Function&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Softmax(x)&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_28_0.png#pic_center" alt="png"></p><h3 id="4-4-nn-sequential">4.4 nn.Sequential</h3><p><code>nn.Sequential</code>是 PyTorch 提供的一个容器模块，它按顺序包含其他子模块，便于构建和管理简单的神经网络结构。通过 nn.Sequential，可以方便地将一系列层（如线性层、激活函数、卷积层等）按顺序堆叠在一起，从而简化模型定义和前向传播的代码。简而言之就是一个包裹的顺序容器。</p><h2 id="5-理解我们的神经网络">5 理解我们的神经网络</h2><p>看完这些，我们再来理解这个官网给的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="comment"># 重构 __init__，定义“固有属性”</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 这一步操作是调用父类 nn.Module 的构造函数，确保继承自 nn.Module 的特性正确初始化</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 定义一个展开层 flatten</span></span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        <span class="comment"># 定义一个线性容器，可以简化在forward中的调用</span></span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            <span class="comment"># 容器内包含一个三层网络</span></span><br><span class="line">            <span class="comment"># 这里的512、10都是研究者根据具体任务和数据集进行调试和优化得到的结果</span></span><br><span class="line">            <span class="comment"># 熟悉的调参</span></span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line">    <span class="comment"># 重构forward，定义前向传播路径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 在这里定义各个层输入输出的顺序，即层在网络里的位置关系</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line">model = NeuralNetwork().to(device) <span class="comment"># 将网络移入device，并打印结构</span></span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><pre><code>NeuralNetwork(  (flatten): Flatten(start_dim=1, end_dim=-1)  (linear_relu_stack): Sequential(    (0): Linear(in_features=784, out_features=512, bias=True)    (1): ReLU()    (2): Linear(in_features=512, out_features=512, bias=True)    (3): ReLU()    (4): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><h2 id="6-使用我们的网络">6 使用我们的网络</h2><p>主要步骤如下：</p><ul><li>定义模型</li><li>数据载入</li><li>损失函数和优化</li><li>训练和评估</li><li>预测与可视化</li></ul><p>先导入所需包：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="6-1-定义模型">6.1 定义模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义设备，如果有GPU则使用GPU，否则使用CPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建神经网络模型实例，并移动到设备上</span></span><br><span class="line">model = NeuralNetwork().to(device)</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><pre><code>NeuralNetwork(  (flatten): Flatten(start_dim=1, end_dim=-1)  (linear_relu_stack): Sequential(    (0): Linear(in_features=784, out_features=512, bias=True)    (1): ReLU()    (2): Linear(in_features=512, out_features=512, bias=True)    (3): ReLU()    (4): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><h3 id="6-2-数据载入">6.2 数据载入</h3><p>我们这次用的模型用于简单图像分类问题，所以可以使用<a href="https://paperswithcode.com/dataset/mnist">MNIST数据集</a>，导入用的是PyTorch的<a href="https://pytorch.org/vision/stable/datasets.html">datasets</a>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载MNIST数据集并进行预处理</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    <span class="comment"># 对图片的常用操作，将图像数据转换为形状为 (C, H, W) 的张量</span></span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 因为数据集是灰度图像，所以只有单值标准化</span></span><br><span class="line">    transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载MNIST数据集，并划分训练集和测试集（这里会下载下来）</span></span><br><span class="line">train_dataset = datasets.MNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, transform=transform, download=<span class="literal">True</span>)</span><br><span class="line">test_dataset = datasets.MNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义批量大小和数据加载器</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="6-3-损失函数和优化">6.3 损失函数和优化</h3><p>损失函数选取交叉熵损失函数（Cross Entropy Loss），它是一种常用的损失函数，能够有效地衡量预测类别和真实类别之间的差异。它能够处理模型输出的logits，并且在计算过程中会自动应用Softmax操作，从而简化代码。</p><p>优化器选取随机梯度下降法（Stochastic Gradient Descent, SGD），它是一种简单而有效的优化方法，特别适用于大规模数据集和模型。结合Momentum算法，SGD优化器可以加速收敛并减小震荡，从而在一定程度上提高训练效率和模型性能。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line"><span class="comment"># 定义优化器</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><h3 id="6-4-训练和评估">6.4 训练和评估</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 训练的目的是通过多个训练周期和批次的数据，不断调整模型参数以最小化损失函数，从而提高模型的性能。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">model, train_loader, optimizer, criterion, epochs=<span class="number">5</span></span>):</span><br><span class="line">    <span class="comment"># 某些层（如Dropout和BatchNorm）在训练和评估模式下的行为不同，所以需要显式地设置模型为训练模式。</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="comment"># 开始训练循环</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="comment"># 初始化损失</span></span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="comment"># 遍历训练数据加载器中的每个批次</span></span><br><span class="line">        <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            <span class="comment"># 将数据移动到设备上</span></span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            <span class="comment"># 梯度清零</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># 前向传播，将数据输入模型进行预测</span></span><br><span class="line">            output = model(data)</span><br><span class="line">            <span class="comment"># 计算损失</span></span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line">            <span class="comment"># 将损失反向传播</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            <span class="comment"># 使用优化器更新参数</span></span><br><span class="line">            optimizer.step() </span><br><span class="line">            <span class="comment"># 累计损失</span></span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            <span class="keyword">if</span> batch_idx % <span class="number">100</span> == <span class="number">99</span>:    <span class="comment"># 每100个批次打印一次训练状态</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>], Step [<span class="subst">&#123;batch_idx+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(train_loader)&#125;</span>], Loss: <span class="subst">&#123;running_loss/<span class="number">100</span>:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">model, test_loader</span>):</span><br><span class="line">    <span class="comment"># 进入评估模式，原因与train同理</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="comment"># 累计计数</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 测试过程不会进行优化，所以no_grad禁用梯度计算可以加快测试速度</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            <span class="comment"># 前向传播，将数据输入模型进行预测</span></span><br><span class="line">            outputs = model(data)</span><br><span class="line">            <span class="comment"># 获取预测结果</span></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            total += target.size(<span class="number">0</span>)</span><br><span class="line">            correct += (predicted == target).<span class="built_in">sum</span>().item()</span><br><span class="line">    accuracy = <span class="number">100</span> * correct / total</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Test Accuracy: <span class="subst">&#123;accuracy:<span class="number">.2</span>f&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-5-预测与可视化">6.5 预测与可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可视化预测结果</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_predictions</span>(<span class="params">model, test_loader, num_images=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># 这里和上面定义的test相似，主要是在执行过程中添加了可视化代码和限制了测试数量</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    images_so_far = <span class="number">0</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> i, (inputs, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            inputs = inputs.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line">            <span class="comment"># 获取每张图的预测结果，并将数据绘制出来进行比对</span></span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            _, preds = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(inputs.size(<span class="number">0</span>)):</span><br><span class="line">                images_so_far += <span class="number">1</span></span><br><span class="line">                ax = plt.subplot(num_images // <span class="number">5</span>, <span class="number">5</span>, images_so_far)</span><br><span class="line">                ax.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">                ax.set_title(<span class="string">f&#x27;Predicted: <span class="subst">&#123;preds[j]&#125;</span> (Label: <span class="subst">&#123;labels[j]&#125;</span>)&#x27;</span>)</span><br><span class="line">                <span class="comment"># imshow用于在绘图窗口中显示图像</span></span><br><span class="line">                ax.imshow(inputs.cpu().data[j].numpy().squeeze(), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> images_so_far == num_images:</span><br><span class="line">                    model.train()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        model.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行训练</span></span><br><span class="line">train(model, train_loader, optimizer, criterion)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">test(model, test_loader)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化预测结果</span></span><br><span class="line">visualize_predictions(model, test_loader, num_images=<span class="number">10</span>)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;Model Predictions&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>NeuralNetwork(  (flatten): Flatten(start_dim=1, end_dim=-1)  (linear_relu_stack): Sequential(    (0): Linear(in_features=784, out_features=512, bias=True)    (1): ReLU()    (2): Linear(in_features=512, out_features=512, bias=True)    (3): ReLU()    (4): Linear(in_features=512, out_features=10, bias=True)  ))Epoch [1/5], Step [100/938], Loss: 1.1812Epoch [1/5], Step [200/938], Loss: 0.4243Epoch [1/5], Step [300/938], Loss: 0.3437Epoch [1/5], Step [400/938], Loss: 0.3305Epoch [1/5], Step [500/938], Loss: 0.2820Epoch [1/5], Step [600/938], Loss: 0.2634Epoch [1/5], Step [700/938], Loss: 0.2482Epoch [1/5], Step [800/938], Loss: 0.2131Epoch [1/5], Step [900/938], Loss: 0.2161Epoch [2/5], Step [100/938], Loss: 0.1853Epoch [2/5], Step [200/938], Loss: 0.1658Epoch [2/5], Step [300/938], Loss: 0.1766Epoch [2/5], Step [400/938], Loss: 0.1507Epoch [2/5], Step [500/938], Loss: 0.1606Epoch [2/5], Step [600/938], Loss: 0.1347Epoch [2/5], Step [700/938], Loss: 0.1407Epoch [2/5], Step [800/938], Loss: 0.1371Epoch [2/5], Step [900/938], Loss: 0.1283Epoch [3/5], Step [100/938], Loss: 0.1027Epoch [3/5], Step [200/938], Loss: 0.1169Epoch [3/5], Step [300/938], Loss: 0.1150Epoch [3/5], Step [400/938], Loss: 0.1077Epoch [3/5], Step [500/938], Loss: 0.0986Epoch [3/5], Step [600/938], Loss: 0.1139Epoch [3/5], Step [700/938], Loss: 0.1110Epoch [3/5], Step [800/938], Loss: 0.0986Epoch [3/5], Step [900/938], Loss: 0.0927Epoch [4/5], Step [100/938], Loss: 0.0908Epoch [4/5], Step [200/938], Loss: 0.0834Epoch [4/5], Step [300/938], Loss: 0.0957Epoch [4/5], Step [400/938], Loss: 0.0742Epoch [4/5], Step [500/938], Loss: 0.0873Epoch [4/5], Step [600/938], Loss: 0.0786Epoch [4/5], Step [700/938], Loss: 0.0901Epoch [4/5], Step [800/938], Loss: 0.0828Epoch [4/5], Step [900/938], Loss: 0.0810Epoch [5/5], Step [100/938], Loss: 0.0682Epoch [5/5], Step [200/938], Loss: 0.0729Epoch [5/5], Step [300/938], Loss: 0.0601Epoch [5/5], Step [400/938], Loss: 0.0684Epoch [5/5], Step [500/938], Loss: 0.0755Epoch [5/5], Step [600/938], Loss: 0.0706Epoch [5/5], Step [700/938], Loss: 0.0733Epoch [5/5], Step [800/938], Loss: 0.0579Epoch [5/5], Step [900/938], Loss: 0.0621Test Accuracy: 97.45%</code></pre><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_45_1.png#pic_center" alt="png"></p><p>神经网络（尤其是深度神经网络）的一个非常吸引人的特点就是：它们具有很强的通用性，可以通过不同的数据集进行训练，以解决各种不同的任务。我们可以将该模型使用另外的数据集进行训练和测试，仍然有不低的准确率。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义设备，如果有GPU则使用GPU，否则使用CPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建神经网络模型实例，并移动到设备上</span></span><br><span class="line">model = NeuralNetwork().to(device)</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载FashionMNIST数据集并进行预处理</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_dataset = datasets.FashionMNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, transform=transform, download=<span class="literal">True</span>)</span><br><span class="line">test_dataset = datasets.FashionMNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义批量大小和数据加载器</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数和优化器</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">model, train_loader, optimizer, criterion, epochs=<span class="number">5</span></span>):</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            output = model(data)</span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            <span class="keyword">if</span> batch_idx % <span class="number">100</span> == <span class="number">99</span>:    <span class="comment"># 每100个批次打印一次训练状态</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;epochs&#125;</span>], Step [<span class="subst">&#123;batch_idx+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(train_loader)&#125;</span>], Loss: <span class="subst">&#123;running_loss/<span class="number">100</span>:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">model, test_loader</span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            outputs = model(data)</span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            total += target.size(<span class="number">0</span>)</span><br><span class="line">            correct += (predicted == target).<span class="built_in">sum</span>().item()</span><br><span class="line">    accuracy = <span class="number">100</span> * correct / total</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Test Accuracy: <span class="subst">&#123;accuracy:<span class="number">.2</span>f&#125;</span>%&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化预测结果</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_predictions</span>(<span class="params">model, test_loader, num_images=<span class="number">10</span></span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    images_so_far = <span class="number">0</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> i, (inputs, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            inputs = inputs.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            _, preds = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(inputs.size(<span class="number">0</span>)):</span><br><span class="line">                images_so_far += <span class="number">1</span></span><br><span class="line">                ax = plt.subplot(num_images // <span class="number">5</span>, <span class="number">5</span>, images_so_far)</span><br><span class="line">                ax.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">                ax.set_title(<span class="string">f&#x27;Predicted: <span class="subst">&#123;preds[j]&#125;</span> (Label: <span class="subst">&#123;labels[j]&#125;</span>)&#x27;</span>)</span><br><span class="line">                ax.imshow(inputs.cpu().data[j].numpy().squeeze(), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> images_so_far == num_images:</span><br><span class="line">                    model.train()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        model.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行训练</span></span><br><span class="line">train(model, train_loader, optimizer, criterion)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">test(model, test_loader)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化预测结果</span></span><br><span class="line">visualize_predictions(model, test_loader, num_images=<span class="number">10</span>)</span><br><span class="line">plt.suptitle(<span class="string">&#x27;Model Predictions&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>NeuralNetwork(  (flatten): Flatten(start_dim=1, end_dim=-1)  (linear_relu_stack): Sequential(    (0): Linear(in_features=784, out_features=512, bias=True)    (1): ReLU()    (2): Linear(in_features=512, out_features=512, bias=True)    (3): ReLU()    (4): Linear(in_features=512, out_features=10, bias=True)  ))Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gzDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data\FashionMNIST\raw\train-images-idx3-ubyte.gz100%|██████████| 26421880/26421880 [00:09&lt;00:00, 2925221.13it/s]Extracting ./data\FashionMNIST\raw\train-images-idx3-ubyte.gz to ./data\FashionMNIST\rawDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gzDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data\FashionMNIST\raw\train-labels-idx1-ubyte.gz100%|██████████| 29515/29515 [00:00&lt;00:00, 109466.29it/s]Extracting ./data\FashionMNIST\raw\train-labels-idx1-ubyte.gz to ./data\FashionMNIST\rawDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gzDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data\FashionMNIST\raw\t10k-images-idx3-ubyte.gz100%|██████████| 4422102/4422102 [00:03&lt;00:00, 1300467.91it/s]Extracting ./data\FashionMNIST\raw\t10k-images-idx3-ubyte.gz to ./data\FashionMNIST\rawDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gzDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data\FashionMNIST\raw\t10k-labels-idx1-ubyte.gz100%|██████████| 5148/5148 [00:00&lt;?, ?it/s]Extracting ./data\FashionMNIST\raw\t10k-labels-idx1-ubyte.gz to ./data\FashionMNIST\rawEpoch [1/5], Step [100/938], Loss: 1.1565Epoch [1/5], Step [200/938], Loss: 0.5964Epoch [1/5], Step [300/938], Loss: 0.5602Epoch [1/5], Step [400/938], Loss: 0.4892Epoch [1/5], Step [500/938], Loss: 0.4697Epoch [1/5], Step [600/938], Loss: 0.4513Epoch [1/5], Step [700/938], Loss: 0.4250Epoch [1/5], Step [800/938], Loss: 0.4449Epoch [1/5], Step [900/938], Loss: 0.4222Epoch [2/5], Step [100/938], Loss: 0.3898Epoch [2/5], Step [200/938], Loss: 0.4246Epoch [2/5], Step [300/938], Loss: 0.3827Epoch [2/5], Step [400/938], Loss: 0.3843Epoch [2/5], Step [500/938], Loss: 0.3889Epoch [2/5], Step [600/938], Loss: 0.3798Epoch [2/5], Step [700/938], Loss: 0.3719Epoch [2/5], Step [800/938], Loss: 0.3580Epoch [2/5], Step [900/938], Loss: 0.3599Epoch [3/5], Step [100/938], Loss: 0.3433Epoch [3/5], Step [200/938], Loss: 0.3238Epoch [3/5], Step [300/938], Loss: 0.3418Epoch [3/5], Step [400/938], Loss: 0.3485Epoch [3/5], Step [500/938], Loss: 0.3291Epoch [3/5], Step [600/938], Loss: 0.3552Epoch [3/5], Step [700/938], Loss: 0.3283Epoch [3/5], Step [800/938], Loss: 0.3576Epoch [3/5], Step [900/938], Loss: 0.3445Epoch [4/5], Step [100/938], Loss: 0.3389Epoch [4/5], Step [200/938], Loss: 0.3166Epoch [4/5], Step [300/938], Loss: 0.3058Epoch [4/5], Step [400/938], Loss: 0.3002Epoch [4/5], Step [500/938], Loss: 0.3100Epoch [4/5], Step [600/938], Loss: 0.3184Epoch [4/5], Step [700/938], Loss: 0.3259Epoch [4/5], Step [800/938], Loss: 0.2956Epoch [4/5], Step [900/938], Loss: 0.3196Epoch [5/5], Step [100/938], Loss: 0.3010Epoch [5/5], Step [200/938], Loss: 0.3058Epoch [5/5], Step [300/938], Loss: 0.2970Epoch [5/5], Step [400/938], Loss: 0.2836Epoch [5/5], Step [500/938], Loss: 0.3009Epoch [5/5], Step [600/938], Loss: 0.2991Epoch [5/5], Step [700/938], Loss: 0.2695Epoch [5/5], Step [800/938], Loss: 0.2856Epoch [5/5], Step [900/938], Loss: 0.2897Test Accuracy: 86.87%</code></pre><p><img src="/images/DL-pics/create_neural_network_files/create_neural_network_47_9.png#pic_center" alt="png"></p><h1 id="参考">参考</h1><ul><li><a href="https://pytorch.ac.cn/tutorials/beginner/basics/buildmodel_tutorial.html">PyTorch-构建神经网络</a></li><li><a href="https://pytorch-cn.readthedocs.io/zh/latest/package_references/torch-nn/">PyTorch中文文档</a></li><li><a href="https://zh.d2l.ai/chapter_multilayer-perceptrons/mlp.html">d2L-多层感知机</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL-notes </tag>
            
            <tag> DL </tag>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DL-notes:目录</title>
      <link href="/2024/06/26/Deep-Learning/DL-notes/"/>
      <url>/2024/06/26/Deep-Learning/DL-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="目录">目录</h2><ul><li><strong>深度学习基础</strong>：线性神经网络、多层感知机</li><li><strong>卷积神经网络</strong>：LeNet、AlexNet、VGG、Inception、ResNet</li><li><strong>循环神经网络</strong>：RNN、GRU、LSTM、seq2seq</li><li><strong>注意力机制</strong>：Attention、Transformer</li><li><strong>优化算法</strong>：SGD、Momentum、Adam</li><li><strong>高性能计算</strong>：并行、多GPU、分布式</li><li><strong>计算机视觉</strong>：目标检测、语义分割</li><li><strong>自然语言处理</strong>：词嵌入、BERT</li></ul><h2 id="杂谈">杂谈</h2><ul><li>pytorch 环境安装</li><li>如何使用 pytorch 创建一个神经网络</li></ul><h2 id="参考">参考</h2><p><a href="https://datawhalechina.github.io/leedl-tutorial/#/">李宏毅深度学习教程LeeDL-Tutorial</a><br><a href="https://nndl.github.io/">邱锡鹏神经网络与深度学习NNDL</a></p><p><a href="https://zh.d2l.ai/index.html">《动手学深度学习》 — 动手学深度学习 2.0.0 documentation (d2l.ai)</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL-notes </tag>
            
            <tag> DL </tag>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCodeCookBook 刷题记录</title>
      <link href="/2024/06/13/LeetCode/LeetCodeBook/"/>
      <url>/2024/06/13/LeetCode/LeetCodeBook/</url>
      
        <content type="html"><![CDATA[<p><strong>2024年6月打卡日程：</strong></p><table><thead><tr><th style="text-align:center">日</th><th style="text-align:center">一</th><th style="text-align:center">二</th><th style="text-align:center">三</th><th style="text-align:center">四</th><th style="text-align:center">五</th><th style="text-align:center">六</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"><strong>10</strong></td><td style="text-align:center"><strong>11</strong></td><td style="text-align:center"><strong>12</strong></td><td style="text-align:center"><font style="background: red"><strong>13</strong></font></td><td style="text-align:center"><strong>14</strong></td><td style="text-align:center"><strong>15</strong></td></tr><tr><td style="text-align:center"><strong>16</strong></td><td style="text-align:center"><strong>17</strong></td><td style="text-align:center"><strong>18</strong></td><td style="text-align:center"><strong>19</strong></td><td style="text-align:center"><strong>20</strong></td><td style="text-align:center"><strong>21</strong></td><td style="text-align:center"><strong>22</strong></td></tr><tr><td style="text-align:center"><strong>23</strong></td><td style="text-align:center"><strong>24</strong></td><td style="text-align:center"><strong>25</strong></td><td style="text-align:center"><strong>26</strong></td><td style="text-align:center"><strong>27</strong></td><td style="text-align:center"><strong>28</strong></td><td style="text-align:center"><strong>29</strong></td></tr><tr><td style="text-align:center"><strong>30</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1 id="c-stl-刷题手册">C++ STL 刷题手册</h1><blockquote><p>作者的bb：一个月没动静了，赶紧活动起来啊！！！</p></blockquote><p>有些简单介绍也不重复，参考<a href="https://www.runoob.com/cplusplus/cpp-stl-tutorial.html">C++ STL 教程 | 菜鸟教程 (runoob.com)</a> 就可以了，我在这里就是记录一些笔记，方便刷题。</p><h2 id="1-vector">1. vector</h2><ul><li>size 和 capacity 的区别，如何动态删除元素、释放内存？</li><li>指针和引用的作用是什么？</li><li>shrink_to_fit 和 resize 有什么作用？</li><li>如何截取片段？</li></ul><h2 id="2-stack">2. stack</h2><h2 id="3-queue">3. queue</h2><h2 id="4-deque">4. deque</h2><h2 id="5-priority-queue">5. priority_queue</h2><h2 id="6-map">6. map</h2><h2 id="7-set">7. set</h2><h2 id="8-pair">8. pair</h2><h2 id="9-string">9. string</h2><h2 id="10-bitset">10. bitset</h2><h2 id="11-array">11. array</h2><h2 id="12-tuple">12. tuple</h2><hr><h1 id="刷题记录">刷题记录</h1><p>该刷题记录主要是记录自己的日常刷题，给自己提供一些手感和积累，题目来源于LeetCode，希望通过日积月累，能有所提升和感触。</p><p>题单参考的是 <a href="https://books.halfrost.com/leetcode/">halfrost/LeetCode-Go</a>，希望大家都能一起加油。</p><p>主要流程的话，目前计划的是分三轮：</p><ul><li>第一轮刷所有简单难度且AC&gt;40%的题目，当然第一轮的时候就可以开始整理题型了</li></ul><blockquote><p>有一个跟着我进度的题单，当然肯定很慢hhh，<a href="https://leetcode.cn/problem-list/GCJ4Hsn9/">题单陆续更新ing</a></p></blockquote><ul><li>第二轮刷所有中等难度且AC&gt;40%的题目</li><li>第三轮查漏补缺，关注自己薄弱的方向</li></ul><h2 id="a-数组-array">A. 数组 Array</h2><h3 id="1-两数之和"><a href="https://leetcode.cn/problems/two-sum/">1.两数之和</a></h3><blockquote><p>2024/04/22</p></blockquote><p>很简单的一道题，最简单的方法是暴搜，双指针搜索，和为 target 记录下来，复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j ++)</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(i);</span><br><span class="line">                    res.<span class="built_in">push_back</span>(j);</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>尝试一下将复杂度降低，用哈希表，单指针遍历，寻找差值，复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashtable;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = hashtable.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (it != hashtable.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="26-删除有序数组中的重复项"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h3><blockquote><p>2024/06/13</p></blockquote><p>很简单的一道题，也是双指针的一个理念，两个值 pos 和 i ，pos 负责赋值不重复元素，i 负责往后遍历，复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                nums[pos] = nums[i];</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>做到这里的时候，思考到了 vector 长度的问题，这道题返回了 pos ，所以不需要作长度的处理。但是实际上如果不返回 pos 要修改 nums 长度的话得用 resize，但是实际上 resize 更改的是逻辑大小，shrink_to_fit 在 C++ 11 引入，可以把物理大小和逻辑大小匹配起来。同时在这里也不得不想到 vector 的属性 size 和 capacity，具体的话去看刷题手册，这里就不细说了。</p><h3 id="27-移除元素"><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h3><blockquote><p>2024/06/19 （看算法去了，每日一题下次一定）</p></blockquote><p>同样简单的题，双指针，类似于上面的 26 题，一个指针覆盖数组，一个指针遍历数组。k 在 ++ 之前其实就可以当第一个指针，所以就直接用 k 作为指针了。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[k] = nums[i];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="35-搜索插入位置"><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></h3><blockquote><p>2024/06/25</p></blockquote><p>经典的错误，标准的零分 bushi。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>复杂度，有序数组查找，所以二分查找。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>, mid = <span class="number">0</span>, ans = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) </span><br><span class="line">        &#123;</span><br><span class="line">            mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r =  mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                l =  mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="b-字符串-string">B. 字符串 String</h2><h2 id="c-双指针-two-pointers">C. 双指针 Two Pointers</h2><h2 id="d-链表-linked-list">D. 链表 Linked List</h2><h2 id="e-栈-stack">E. 栈 Stack</h2><h2 id="f-树-tree">F. 树 Tree</h2><h2 id="g-动态规划-dynamic-programming">G. 动态规划 Dynamic Programming</h2><h2 id="h-回溯算法-backtracking">H. 回溯算法 Backtracking</h2><h2 id="i-深度优先搜索-depth-first-search">I. 深度优先搜索 Depth First Search</h2><h2 id="j-宽度优先搜索-breadth-first-search">J. 宽度优先搜索 Breadth First Search</h2><h2 id="k-二分查找-binary-search">K. 二分查找 Binary Search</h2><h2 id="l-数论-math">L. 数论 Math</h2><h2 id="m-哈希表-hash-table">M. 哈希表 Hash Table</h2><h3 id="205-同构字符串"><a href="https://leetcode.cn/problems/isomorphic-strings/description/">205.同构字符串</a></h3><blockquote><p>2024/04/17</p></blockquote><p>同样简单的一道题，最容易想到的是两个哈希表相互映射进行比较，复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt;::iterator iterS;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt;::iterator iterT;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; mapS;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; mapT;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            iterS = mapS.<span class="built_in">find</span>(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(iterS != mapS.<span class="built_in">end</span>())&#123;</span><br><span class="line">                iterT = mapT.<span class="built_in">find</span>(t[i]);</span><br><span class="line">                <span class="keyword">if</span>(iterT == mapT.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!(iterS-&gt;second == t[i] &amp;&amp; iterT-&gt;second == s[i]))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                iterT = mapT.<span class="built_in">find</span>(t[i]);</span><br><span class="line">                <span class="keyword">if</span>(iterT != mapT.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mapS[s[i]] = t[i];</span><br><span class="line">                mapT[t[i]] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="排序-sort">排序 Sort</h2><h2 id="位运算-bit-manipulation">位运算 Bit Manipulation</h2><h2 id="联合查找-union-find">联合查找 Union Find</h2><h2 id="滑动窗口-sliding-window">滑动窗口 Sliding Window</h2><h2 id="线段树-segment-tree">线段树 Segment Tree</h2><h2 id="二叉索引树-binary-indexed-tree">二叉索引树 Binary Indexed Tree</h2><h1 id="工具">工具</h1><p><a href="https://osdoc.net/md/">Markdown 简介 | 开源文档 (osdoc.net)</a></p><h1 id="参考">参考</h1><p><a href="https://github.com/halfrost/LeetCode-Go">LeetCode-Go</a></p><p><a href="https://www.programmercarl.com/">代码随想录</a></p><p>《挑战程序设计竞赛2：算法与数据结构》</p><p><a href="https://github.com/yogykwan/acm-challenge-workbook">《挑战程序设计竞赛》习题册攻略 </a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:SVM</title>
      <link href="/2024/05/07/ML-notes/pages/svm/"/>
      <url>/2024/05/07/ML-notes/pages/svm/</url>
      
        <content type="html"><![CDATA[<h1 id="6-svm">6 SVM</h1>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单细胞数据分析</title>
      <link href="/2024/04/24/single-cell/usingScanpy/"/>
      <url>/2024/04/24/single-cell/usingScanpy/</url>
      
        <content type="html"><![CDATA[<h1 id="单细胞数据分析">单细胞数据分析</h1><p>自2013年被选为年度方法以来，单细胞技术已经足够成熟，可以为复杂的研究问题提供答案。随着单细胞分析技术的发展，从单细胞分析中收集的数据也显著增加，导致处理这些庞大而复杂的数据集的计算挑战。</p><h2 id="单细胞rna测序-数据分析">单细胞RNA测序-数据分析</h2><p>scanpy 是一个用于分析单细胞转录组(single cell rna sequencing) 数据的python库，文章2018发表在<a href="https://genomebiology.biomedcentral.com/"><em>Genome Biology</em></a>。它和seurat几乎大差不差，但是以Python的生态，完全可以认为其具有更大的扩展潜力。</p><h3 id="安装环境-scanpy单细胞测序学习-环境配置">安装环境（<a href="https://yingbio.cn/archives/scseq-scanpy-install">Scanpy单细胞测序学习-环境配置</a>）</h3><h3 id="公共单细胞数据集">公共单细胞数据集</h3><p>10X Genomics免费提供的外周血单核细胞(PBMC)数据集</p><p><a href="https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html">Preprocessing and clustering 3k PBMCs (legacy workflow) — scanpy-tutorials 0.1.dev50+g06018e6 documentation</a></p><p>scanpy提供的公开数据集</p><p><a href="https://scanpy.readthedocs.io/en/stable/api/datasets.html">Datasets — scanpy</a></p><h3 id="开始">开始</h3><h4 id="1-载入包">1. 载入包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 载入包</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scanpy <span class="keyword">as</span> sc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志等级: errors (0), warnings (1), info (2), hints (3)</span></span><br><span class="line">sc.settings.verbosity = <span class="number">3</span>             </span><br><span class="line">sc.logging.print_header()</span><br><span class="line">sc.settings.set_figure_params(dpi=<span class="number">80</span>, facecolor=<span class="string">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>scanpy==1.10.1 anndata==0.10.7 umap==0.5.5 numpy==1.23.1 scipy==1.13.0 pandas==2.2.2 scikit-learn==1.4.2 statsmodels==0.14.1 igraph==0.11.4 pynndescent==0.5.12</p></blockquote><h4 id="2-载入数据集">2. 载入数据集</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sc载入数据集</span></span><br><span class="line">adata = sc.datasets.pbmc3k()</span><br><span class="line"><span class="comment"># 本地载入数据集</span></span><br><span class="line">results_file = <span class="string">&#x27;D:\scanpy\write\pbmc3k.h5ad&#x27;</span> </span><br><span class="line"><span class="built_in">help</span>(sc.read_10x_mtx)</span><br><span class="line">adata = sc.read_10x_mtx(</span><br><span class="line">    <span class="string">&#x27;D:/scanpy/data/filtered_feature_bc_matrix&#x27;</span>,  <span class="comment"># the directory with the `.mtx` file</span></span><br><span class="line">    var_names=<span class="string">&#x27;gene_symbols&#x27;</span>,                  <span class="comment"># use gene symbols for the variable names (variables-axis index)</span></span><br><span class="line">    cache=<span class="literal">True</span>) </span><br><span class="line">adata.var_names_make_unique()  <span class="comment"># this is unnecessary if using `var_names=&#x27;gene_ids&#x27;` in `sc.read_10x_mtx`</span></span><br></pre></td></tr></table></figure><h4 id="3-查看数据">3. 查看数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adata</span><br></pre></td></tr></table></figure><img src="D:\code\SapientialM\source\_posts\single-cell\assets\image-20240423155809136.png" alt="image-20240423155809136" style="zoom:67%;" /><p>AnnData object with n_obs × n_vars = 2700 × 32738 意思是这是一个AnnData对象，n_obs 即有2700个细胞样本，n_vars 即有32738个基因序列。</p><h5 id="数据对象-anndata-annotated-data">数据对象 （<a href="https://anndata.readthedocs.io/en/latest/index.html">anndata - Annotated data</a>）</h5><p>Scanpy 构建的对象叫做 AnnData 对象：</p><p>标准的AnnData对象主要包括以下几个部分（如果你要调用这些属性，只需要直接添加到后面即可，比如adata.obs、adata.X等）：</p><ul><li>.X: 存储基因表达矩阵，行代表基因，列代表细胞，也就是<strong>显示的 n_obs x n_vars</strong>。</li><li>.obs: <strong>观测值数据</strong>，存储细胞相关的注释信息，例如细胞类型、样本信息等。</li><li>.var: <strong>特征和高可变数据</strong>，存储基因相关的注释信息，例如基因名称、基因类型等。</li><li>.uns: <strong>非结构化数据</strong>，存储与数据分析相关的信息，例如数据预处理参数、可视化参数等；可以包含一些在分析数据时我们得到的一些有价值的信息。</li><li>.obsm: <strong>细胞的附加数据</strong>，例如细胞的空间位置、转录组拆分信息等；也就是我们进行进一步处理后得到的细胞数据。</li><li>.varm: <strong>基因的附加数据</strong>，例如基因的表达模式、变异信息等；也就是我们处理得到的基因级别的元数据。</li><li>.layers: <strong>各种类型的基因表达矩阵</strong>，例如原始表达矩阵、归一化表达矩阵等；我们可能拥有不同形式的原始核心数据，也许一种是规范化的，或者不是。这些可以存储在 AnnData 的不同layer中。</li><li>varp、obsp: <strong>基因、细胞映射关系的附加数据</strong>，我没有在相关文档找到varp的详细说明，但应该类似于varm、obsm，拥有 n_obs x n_obs 和 n_var x n_var 大小的矩阵，用于数据分析国产中得到的一些映射关系的信息，比如A基因与B基因之间的关系，A细胞与B细胞之间的关系。</li></ul><blockquote><p>p即Pairwise annotation，m即Multi-dimensional annotation，obs即observations，var即variables/ features，uns即Unstructured annotation，具体的数据解释可参考：<a href="https://anndata.readthedocs.io/en/latest/generated/anndata.AnnData.html">anndata.AnnData — anndata 0.1.dev50+g0a768fc documentation</a></p></blockquote><p>整个AnnData对象如下所示结构，具体意思就是，根据var即基因信息作为属性列包含了 var 表、X表、varm表、varp表，同样的obs作为属性列包含了obs表、X表、obsm表、obsp表</p><img src="https://anndata.readthedocs.io/en/latest/_static/anndata_schema.svg" width="50%" height="50%"><h5 id="数据核心">数据核心</h5><p>单细胞转录组的核心就是一个cell X gene的二维表，</p><h4 id="4-查看数据">4. 查看数据</h4><h3 id="参考资料">参考资料</h3><p>推荐一本书：</p><p><a href="https://www.bookstack.cn/read/pyda-2e-zh/README.md">《利用 Python 进行数据分析 · 第 2 版》  · BookStack</a></p><p>参考资料：</p><p><a href="https://www.youtube.com/watch?v=_tP6vCwZfuY">Single Cell data analysis tutorial on PBMC dataset using scanpy - Part1</a></p><p><a href="https://github.com/ramadatta/Youtube/tree/main/scanpy/PBMC_data">Youtube/scanpy/PBMC_data at main · ramadatta/Youtube (github.com)</a></p><p><a href="https://mp.weixin.qq.com/s/c_3NjoJyZkSv1XjIYu-V_g">【基于python的单细胞分析】使用scVI实现批次效应校正</a></p><p><a href="https://mp.weixin.qq.com/s/ekJ0gyMqnchx5_6U4WoPHQ">【基于python的单细胞分析】如何进行细胞类型注释</a></p><p><a href="https://mp.weixin.qq.com/s/u5fkFnTe_eDe1F2RTkdtLQ">基于Scanpy的单细胞数据质控、聚类、标注</a></p><p><a href="https://blog.51cto.com/u_14782715/5082964"><strong>scanpy 单细胞分析包图文详解 01 | 深入理解 AnnData 数据结构</strong></a></p><p><a href="https://www.youtube.com/watch?v=NYpwinpPEb0">【陈巍学基因】单细胞RNA测序分析图解读</a></p><p><a href="https://yingbio.cn/archives/scseq-scanpy-install">Scanpy单细胞测序学习-环境配置</a></p><p><a href="https://mp.weixin.qq.com/s/IlG2R7qXCHpOH94cQHRRdA">基于COSG的单细胞数据marker基因鉴定</a></p><p><a href="https://cloud.tencent.com/developer/article/1610396">scanpy教程：预处理与聚类-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html">预处理和聚类 3k PBMC（旧工作流） — scanpy-tutorials 0.1.dev50+g06018e6 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> 单细胞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> single-cell </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:人工神经网络</title>
      <link href="/2024/04/16/ML-notes/pages/neural-network/"/>
      <url>/2024/04/16/ML-notes/pages/neural-network/</url>
      
        <content type="html"><![CDATA[<h1 id="5-人工神经网络">5 人工神经网络</h1><p>本章讨论现阶段比较热门的一个<strong>监督学习算法————人工神经网络（artificial Neural Network）</strong></p><p>神经网络是由具有<strong>适应性的简单单元</strong>组成的广泛<strong>并行互连的网络</strong>，它的组织能够模拟<strong>生物神经系统</strong>对真实世界物体所做的交互反应。</p><h2 id="5-1-a-name-5-1-神经元模型-neuron-a">5.1 <a name='5.1'>神经元模型 Neuron</a></h2><p><strong>神经网络中最基本的成分</strong>便是神经元（Neuron）模型，也就是上面说的<strong>适应性简单单元</strong>。在神经网络中，每个神经元都与其他神经元相连，当它“兴奋”时，都会向相连的神经元发送化学物质，改变相连的神经元内的电位；如果神经元电位超过了一个“阈值”（threshold），那么该神经元就会兴奋，所以整个神经网络就是通过兴奋和电位来传播信息。</p><h3 id="5-1-1-a-name-5-1-1-m-p神经元模型-a">5.1.1 <a name='5.1.1'>M-P神经元模型</a></h3><p>1943年一直沿用至今的 <strong>“M-P神经元模型”</strong> 便是对这个过程的抽象。</p><p>在这个模型中，</p><ul><li>神经元收到了来自其他 n 个神经元传递过来的<strong>输入信号</strong> x<sub>i</sub></li><li>而这些输入信号<strong>通过带有权重的连接（connection）</strong>，这些权重又叫连接权（connection weight）。</li><li>然后来到细胞体的<strong>前部分</strong>，它负责计算总输入值（输入信号的<strong>加权求和</strong>，累积电平）</li><li>然后到达<strong>后部分</strong>，<strong>计算总输入值与神经元阈值的差值</strong>，通过<strong>激活函数（activation function）处理</strong>，传递到下一层神经元。</li></ul><div align=center><img src="/images/ML-pics/5.1.png" /></div><blockquote><ul><li>① 𝒙<sub>𝒊</sub> 来自第𝑖个神经元的输入</li><li>② 𝒘<sub>𝒊</sub> 第𝑖 个神经元的连接权重</li><li>③ 𝜽 阈值(threshold)或称为偏置 （bias）</li><li>④ y是输出，也是激活函数</li></ul></blockquote><p>和之前讲的线性模型的分类十分相似，<strong>神经元模型最理想的激活函数</strong>也是阶跃函数。即将神经元输入值与阈值的差值映射为输出值 1 或 0 ，0 表示抑制神经元而 1 表示激活神经元。但阶跃函数不连续，不光滑，故在M-P神经元模型中，也采用Sigmoid函数来近似， <strong>Sigmoid函数</strong>将较大范围内变化的输入值挤压到 (0,1) 输出值范围内，所以也称为<strong>挤压函数（squashing function）</strong>：</p><div align=center><img src="/images/ML-pics/5.2.png" /></div><p>将多个神经元按一定的层次结构连接起来，就得到了神经网络。它是一种<strong>包含多个参数（输入）的模型</strong>，比方说10个神经元两两连接，则有100个参数需要学习（每个神经元有9个连接权以及1个阈值），若将每个神经元都看作一个函数，则整个神经网络就是由这些<strong>函数相互嵌套</strong>而成。</p><blockquote><p>神经元模型与逻辑回归模型求解的优化问题是一致的，都是<strong>线性二分类问题</strong>。本质上来说，M-P神经元模型就等同于一个线性二分类器。</p><ul><li>Sigmoid函数≠Logistic函数</li><li>Logistic函数⊂ Sigmoid函数</li></ul></blockquote><h2 id="5-2-a-name-5-2-感知机-perceptron-与多层网络-a">5.2 <a name='5.2'>感知机（perceptron）与多层网络</a></h2><h3 id="5-2-1-a-name-5-2-1-感知机-a">5.2.1 <a name='5.2.1'>感知机</a></h3><h4 id="概念">概念</h4><p><strong>感知机（Perceptron）</strong> 是由两层神经元组成的一个简单模型。</p><p>只有输出层是M-P神经元，即<strong>只有输出层神经元进行激活函数处理</strong>，也称为<strong>阈值神经单元（threshold logic unit）</strong>；也叫<strong>功能神经元</strong>。</p><p><strong>输入层只是接受外界信号（样本属性）并传递给输出层</strong>（输入层的神经元个数等于样本的属性数目），而<strong>没有激活函数</strong>。</p><div align=center><img src="/images/ML-pics/5.3.png" /></div><p>于是，感知机与之前线性模型中的对数几率回归的思想基本是一样的，<strong>都是通过对属性加权与另一个常数求和</strong>，再使用sigmoid函数将这个输出值压缩到0-1之间，从而解决分类问题。</p><p>不同的是感知机的输出层应该可以有多个神经元，从而可以实现多分类问题，同时两个模型所用的参数估计方法十分不同。</p><h4 id="学习">学习</h4><p>给定数据集，权重 W<sub>i</sub>(i = 1,2…,n)以及阈值 θ 可以通过<strong>学习</strong>得到。阈值 θ 可以看作一个固定的输入为 -1.0 的“哑结点”（dummy node）所对应的连接权重 w<sub>n+1</sub>，这样我们就<strong>可以i将权重与阈值的学习统一为权重学习</strong>。</p><p>感知机的学习规则非常简单，对于训练样例 （x，y），若当前感知机的输出为 y<sup>~</sup>，则感知机权重这样调整:</p><div align=center><img src="/images/ML-pics/L5.1.png" /></div><p>其中 ŋ ∈（0，1）称为学习率（learning rate）。从上图知道，如果预测正确，即样例的 y 与预测值 y<sup>~</sup>相等，则不会调整权重。</p><h4 id="缺陷">缺陷</h4><p>感知机只有输出层神经元进行激活函数处理，也<strong>就是只有这一层功能神经元</strong>，学习能力有限。而 <strong>与、或、非问题都是线性可分（linearly separable）问题</strong>。对于这种线性可分问题，感知机的学习过程一定是收敛从而求得适当的权向量 w = （w1;w2;…;wn+1）;不收敛的话，感知机就会发生<strong>振荡（fluctuation）</strong>。权向量难以稳定，无法求得合适解。</p><p>比如下面的非线性可分问题“异或”就无法解决：</p><div align=center><img src="/images/ML-pics/5.4.png" /></div><blockquote><p>其实就是一个分类问题，当分类边界呈现非线性时感知机就无法解决了</p></blockquote><h4 id="点到超平面距离">点到超平面距离</h4><p>上面有讲到点到超平面，这里讨论一下点到超平面的距离。</p><p><strong>超平面（Hyperplane）</strong>：超平面是n维欧氏空间中余维度等于一的线性子空间，也就是必须是(n-1)维度。<strong>其实相当于是一个n维空间的一种n-1维分界平面。</strong></p><p>我们将数据向量化：</p><ul><li>阈值 θ = w0：</li><li>所以可以将输出向量化如下图：</li></ul><div align=center><img src="/images/ML-pics/L5.2.png" /></div><p>然后我们可以知道<strong>点到超平面(Hyperplane)的距离</strong>:</p><div align=center><img src="/images/ML-pics/L5.3.png" /></div><blockquote><p>也就是 输出的值 det(w<sup>T</sup>x) 除以权值的2-范数 ||w||<sup>2</sup></p></blockquote><h4 id="损失函数">损失函数</h4><p>损失函数的一个自然选择是误分类点的总数。但是这样的损失函数不是参数w和b的连续可导函数，不易优化。</p><p>所以我们将目标选到了<strong>最小化误分类点到分类平面的距离</strong>。得到以下结果：</p><div align=center><img src="/images/ML-pics/L5..4.png" /></div><p>而感知机的目标是使误分类点的个数为0，所以提出了新的概念叫函数间隔，以此简化学习过程：</p><div align=center><img src="/images/ML-pics/L5.2.1_1.png"/></div>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:决策树</title>
      <link href="/2024/04/15/ML-notes/pages/decision-tree/"/>
      <url>/2024/04/15/ML-notes/pages/decision-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="4-决策树">4 决策树</h1><h2 id="4-1-a-name-4-1-基本概念-a">4.1 <a name='4.1'>基本概念</a></h2><h3 id="4-1-1-a-name-4-1-1-举例子-a">4.1.1 <a name='4.1.1'>举例子</a></h3><p>多分类问题实质上通过划分的方法转化为多个二分类问题进行求解。这次我们将讨论另一种被广泛使用的分类算法–<strong>决策树（Decision Tree）</strong>。</p><p>比如 一个相亲——母女对话：</p><ul><li>女儿：多大年纪了？</li><li>母亲：26。</li><li>女儿：长的帅不帅？</li><li>母亲：挺帅的。</li><li>女儿：收入高不？</li><li>母亲：不算很高，中等情况。</li><li>女儿：是公务员不？</li><li>母亲：是，在税务局上班呢。</li><li>女儿：那好，我去见见。</li></ul><blockquote><p>此例子纯属虚构，不代表广大女性同胞的择偶标准。如有雷同纯属巧合。<br>我们就可以通过这段对话，画出一个决策树。</p></blockquote><div align=center><img src="/images/ML-pics/4-2.png" /></div><h3 id="4-1-2-a-name-4-1-2-决策树-a">4.1.2 <a name='4.1.2'>决策树</a></h3><p><strong>决策树（decision tree）</strong>：是构建出的一个基于属性的树形<br>分类器。</p><ul><li>每个非叶节点表示一个特征属性上的测试（分割）（判断）</li><li>每个分支代表这个特征属性在某个值域上的输出（分支）</li><li>每个叶节点存放一个类别（结果）</li></ul><p>使用决策树进行决策的<strong>过程</strong>就是从<strong>根节点开始</strong>，<strong>测试</strong>待分类项中相应的<strong>特征属性</strong>，并按照其值<strong>选择输出分支</strong>，直到<strong>到达叶子节点</strong>，将叶子节点存放的类别作为<strong>决策结果</strong>。</p><h2 id="4-2-a-name-4-2-决策树的构建-a">4.2 <a name='4.2'>决策树的构建</a></h2><p>决策树的构建采用<strong>分治法</strong>的思想（递归）。而结束递归的条件如下：</p><ul><li>① 当前结点样本均属于同一类别，无需划分。（只有一种结果）</li></ul><blockquote><p>Example: 下一个要划分的属性为属性1，显然无论属性为何种，均为 P 类无需划分。</p><div align=center><img src="/images/ML-pics/4-3.png" /></div></blockquote><ul><li>② 当前属性集为空。 （没有下一个结点）</li></ul><blockquote><p>Example: 属性1(B)→属性2(A)→属性3(A) 走完该路径已经无属性往下分</p><div align=center><img src="/images/ML-pics/4-4.png" /></div></blockquote><ul><li>③ 所有样本在当前属性集上取值相同，无法划分。（每个结点只有一条分支）</li></ul><blockquote><p>Example: 属性1 的 B分支下，样本子集中所有样本属性值完全一样，再往下划分就没有意义了。</p><div align=center><img src="/images/ML-pics/4-5.png" /></div></blockquote><ul><li>④ 当前结点包含的样本集合为空，不能划分。</li></ul><blockquote><p>Example: 属性 1 → 属性 2 的分支下只有 A ，无其他子集。</p><div align=center><img src="/images/ML-pics/4-6.png" /></div></blockquote><p><strong>伪代码：</strong></p><div align=center><img src="/images/ML-pics/4-7.png" /></div><h2 id="4-3-a-name-4-3-决策树的核心-a">4.3 <a name='4.3'>决策树的核心</a></h2><p>决策树的核心是：<strong>如何选取最佳划分属性</strong>。</p><p>比如我们举一个极端的例子：</p><div align=center><img src="/images/ML-pics/4-8.png" /></div>很显然，其实根据属性 3 就可以判断出 正负例 了。那加入其他的属性进行判断就显得多余了。<h3 id="4-3-1-a-name-4-3-1-最佳划分-a">4.3.1 <a name='4.3.1'>最佳划分</a></h3><h4 id="最佳划分属性">最佳划分属性</h4><p>我们希望经过属性划分后，不同类样本被更好的分离。</p><ul><li><strong>理想情况</strong>：划分后样本被完美分类。即划分到每个分支的样本都属于同一类。</li><li><strong>实际情况</strong>：不可能完美划分！尽量使得每个分支某一类样本比例尽量高！即尽量提高划分后<strong>子集的纯度（purity）</strong>。</li></ul><h4 id="最佳划分目标">最佳划分目标</h4><ul><li>提升划分后子集的纯度</li><li>降低划分后子集的不纯度</li></ul><p>因此下面便是介绍<strong>量化纯度</strong>的具体方法，决策树最常用的算法有三种：ID3，C4.5和CART。</p><h3 id="4-3-2-a-name-4-3-2-id3-决策树算法-a">4.3.2 <a name='4.3.2'>ID3 决策树算法</a></h3><p>ID3 算法使用信息增益为准则来选择划分属性，“<strong>信息熵</strong>”(information entropy)是度量样本结合纯度的常用指标，所以我们先介绍信息熵。</p><h4 id="信息熵">信息熵</h4><p>假定当前样本集合 D 中第k类样本所占比例为 p<sub>k</sub>，则样本集合D的信息熵定义为：</p><div align=center><img src="/images/ML-pics/4-9.png" /></div><blockquote><p>Ent(D)的值越小，则 D 的纯度越高</p></blockquote><p>假定离散属性 a 有 V 个可能的取值{a<sup>1</sup>,a<sup>2</sup>…,a<sup>V</sup>}。若使用 a 来对样本集 D 进行划分，那么会产生 V 个分支结点，其中 D<sup>v</sup> 表示第 v 个分支结点包含了 D 中所有在属性 a 上取值为 a<sup>v</sup>的样本数。然后呢，我们可以<strong>根据上面的式子计算出 D<sup>v</sup> 的信息熵</strong>，再考虑到不同分支结点包含的样本数的不同，我们还需要对<strong>分支结点赋予权重 |D<sup>v</sup>|/|D|</strong>，即<strong>样本数越多的分支结点的影响越大</strong>，所以就计算出用属性 a 对样本集 D 进行划分所得到的 <strong>信息增益</strong>:</p><div align=center><img src="/images/ML-pics/4-10.png" /></div>信息增益越大，表示使用该属性划分样本集D的效果越好，因此ID3算法在递归过程中，每次选择最大信息增益的属性作为当前的划分属性。也就是每次可以得到最佳划分属性。<h4 id="例子">例子</h4><div align=center><img src="/images/ML-pics/4-11.png" /></div><div align=center><img src="/images/ML-pics/4-12.png" /></div><div align=center><img src="/images/ML-pics/4-13.png" /></div><div align=center><img src="/images/ML-pics/4-14.png" /></div><div align=center><img src="/images/ML-pics/4-15.png" /></div><div align=center><img src="/images/ML-pics/4-16.png" /></div><h3 id="4-3-3-a-name-4-3-3-c4-5-算法-a">4.3.3 <a name='4.3.3'>C4.5 算法</a></h3><h4 id="提出">提出</h4><p><strong>ID3算法存在一个问题，就是偏向于取值数目较多的属性</strong></p><blockquote><p>例如：在学生成绩分类中，考虑学号为一个属性，然而学号基本每个人都有，所以得到得纯度很高，但是对分类毫无用处</p><div align=center><img src="/images/ML-pics/4-17.png" /></div></blockquote><p>因此又提出了 <strong>C4.5算法</strong> 通过 <strong>“增益率”（gain ratio）</strong> 来选择划分属性，来避免这个问题带来的困扰。</p><h4 id="增益率">增益率</h4><p>首先使用ID3算法计算出<strong>信息增益</strong>高于平均水平的候选属性，接着C4.5计算这些候选属性的增益率，<strong>增益率</strong> Gain_ratio 定义为：</p><div align=center><img src="/images/ML-pics/4-18.png" /></div><p>我们称上图的 IV(a) 为属性 a 的 “固有值”。属性 a 的可能取值越多（V 越多），则 IV(a) 通常会越大。</p><p>C4.5 算法不是直接选择增益值最大的候选划分属性，而是类似于一种启发式算法：先从划分属性中找到信息增益高于平均水平的属性，再计算它们的增益率，从增益率内找最高的。</p><h3 id="4-3-4-a-name-4-3-4-cart-算法-a">4.3.4 <a name='4.3.4'>CART 算法</a></h3><p>CART 是另一种决策树算法，使用 <strong>“基尼指数”</strong> 来选择划分属性。采用与 Ent(D) 信息熵计算相同的符号p<sub>k</sub>，数据集 D 的纯度可以用 <strong>基尼值</strong> 来度量：</p><div align=center><img src="/images/ML-pics/4-19.png" /></div>直观的说，Gini(D) 反映了从数据集 D 中随机抽取两个样本，其类别标记不一致的概率。因此，Gini(D) 越小，则数据集 D 的纯度最高。<br><br><p>同样的,基尼值对应信息熵，CART 的<strong>基尼指数</strong>也对应信息增益：</p><div align=center><img src="/images/ML-pics/4-20.png" /></div><blockquote><p>Gini_index 和 Gain_ratio 计算过程一样。CART 和 ID3 算法的区别在于 Gini 和 Gain 的区别。一个是 p<sub>k</sub>log<sub>2</sub>p<sub>k</sub> 一个是 p<sub>k</sub>p<sub>k</sub>’</p></blockquote><p>研究表明: 划分选择的各种准则虽然对决策树的尺寸有较大影响，但对泛化性能的影响很有限。（也就是其实是更改准则对模型的效果影响有限）</p><blockquote><p>例如信息增益与基尼指数产生的结果，仅在约 2% 的情况下不同。</p></blockquote><p>而剪枝方法和程度对决策树泛化性能的影响更为显著。</p><blockquote><p>在数据带噪时甚至可能将泛化性能提升 25%。</p></blockquote><h2 id="4-4-a-name-4-4-剪枝处理-a">4.4 <a name='4.4'>剪枝处理</a></h2><h3 id="4-4-1-a-name-4-4-1-概念-a">4.4.1 <a name='4.4.1'>概念</a></h3><p>从决策树的构造流程中我们可以直观地看出：不管怎么样的训练集，决策树总是能很好地将各个类别分离开来，这时就会遇到之前提到过的问题：过拟合（overfitting），即太依赖于训练样本。<strong>剪枝</strong>（pruning）顾名思义，将多余的分支剪掉，是决策树算法<strong>对付过拟合</strong>的主要手段，剪枝的策略有两种如下：</p><blockquote><ul><li>预剪枝（prepruning）：在构造的过程中先评估，再考虑是否分支。具体是 若当前结点向下划分不能提升决策树泛化性能，则进行裁剪，把结点标记为叶结点，不再向下分支。也就是评估分支与不分支的性能进行比较。</li></ul></blockquote><blockquote><ul><li>后剪枝（post-pruning）：在构造好一颗完整的决策树后，自底向上，评估分支的必要性。具体是 自底向上，判断结点对应的子树被替换为叶结点是否能提升决策树泛化能力，是则进行裁剪（将该结点的子树替换为叶结点）。（如果不懂看这里：其实就是从下向上，看我这一层要是成了叶结点是否会更好，更好则裁剪）</li></ul></blockquote><h3 id="4-4-2-a-name-4-4-2-性能度量-a">4.4.2 <a name='4.4.2'>性能度量</a></h3><p>显然，问题就来了，我怎么知道更好呢？</p><p>之前学的<a href="/2024/04/15/ML-notes/pages/model-evaluation/" title="ML-notes:模型评估与选择">2.模型评估与选择</a>就有用了，其实就是所谓的<strong>性能度量</strong>。之前讲过的 <strong>验证集</strong> 在这里也就有了用处。</p><h4 id="例子">例子</h4><p>书上是使用的留用法，预留一部分数据作为 验证集 来进行性能评估。先看西瓜数据集：</p><div align=center><img src="/images/ML-pics/4-21.png" /></div><p>我们随机将其划分为了两部分，一部分是训练集，一部分是验证集。我们通过<strong>信息增益准则</strong>可以进行属性划分选择，生成一个<strong>未剪枝</strong>的决策树：</p><div align=center><img src="/images/ML-pics/4-22.png" /></div><p><strong>开始了啊！</strong></p><h4 id="预剪枝">预剪枝</h4><div align=center><img src="/images/ML-pics/4-23.png" /></div><p>预剪枝，每次选定属性后，要进行一次评估。图 4.6 就是第一次评估。我首先默认，不作划分的话都是好瓜。对于 ① 脐部，划分前，经过<strong>它所包含的验证集</strong>进行验证，准确率 42.9%，划分后 71.4%，显然需要划分。然后同样的步骤，对于下一层，当然每次划分都需要经过 ① 脐部划分之后再进行，比较验证集精度来进行评估。</p><h4 id="后剪枝">后剪枝</h4><div align=center><img src="/images/ML-pics/4-22.png" /></div><div align=center><img src="/images/ML-pics/4-24.png" /></div><p>后剪枝就直接对 4-2 的未剪枝的决策树进行操作。从纹理层，也就是 ⑥ 开始操作，我们将它剪去，默认分支结果为好瓜，使用<strong>它所包含的验证集</strong>的{1,2,3,14}测试，看模型精度是否会更好。后面的也是一样的了。</p><blockquote><p>注意：每次使用验证集都是直接使用它所包含的验证集的样本，而非所有，因为包含其它分支的样本进行测试对结果无影响。</p></blockquote><h4 id="比较">比较</h4><ul><li>时间开销：<ul><li>预剪枝：训练时间开销降低（不需要生成一次未剪枝的决策树），测试时间开销降低</li><li>后剪枝：训练时间开销增加（需要生成一次未剪枝的决策树），测试时间开销降低</li></ul></li><li>过/欠拟合风险：<ul><li>预剪枝：过拟合风险降低，欠拟合风险增加（没有生成过未剪枝的决策树，剪枝之前得到的信息不全面）</li><li>后剪枝：过拟合风险降低，欠拟合风险基本不变</li></ul></li><li>泛化性能：后剪枝 通常优于 预剪枝</li></ul><h2 id="4-5-a-name-4-5-连续值与缺失值的处理-a">4.5 <a name='4.5'>连续值与缺失值的处理</a></h2><h3 id="4-5-1-a-name-4-5-1-连续值-a">4.5.1 <a name='4.5.1'>连续值</a></h3><p>对于连续值的属性，若每个取值作为一个分支则显得不可行，因此需要进行离散化处理，常用的方法为二分法，基本思想为：给定样本集 D 与连续属性 α ，二分法试图找到一个划分点 t 将样本集 D 在属性 α 上分为 &lt;=t 与 &gt; t (也就是划分出一个区间)。</p><p>二分法：</p><ul><li>n 个属性值可形成 n‐1 个候选划分</li><li>然后即可将它们当做 n‐1 个离散属性值处理</li><li>处理流程：</li></ul><blockquote><ul><li>首先将 α 的所有取值按升序排列，所有<strong>相邻属性的均值作为候选划分点</strong>（n-1个，n为α所有的取值数目）。比如一共五个属性值，则如下：</li></ul><div align=center><img src="/images/ML-pics/line-1.png" /></div><ul><li>计算每一个划分点作为二分点后的信息增益。</li></ul><div align=center><img src="/images/ML-pics/line-2.png" /></div><ul><li>选择最大信息增益的划分点作为最优划分点。</li></ul></blockquote><h3 id="4-5-2-a-name-4-5-2-缺失值-a">4.5.2 <a name='4.5.2'>缺失值</a></h3><p>现实应用中，我们也会遇到属性值“缺失”(missing)的现象。如果不使用有缺失属性的样例训练，那将是巨大的浪费。那么样本的属性缺失该如何划分？</p><p>因此在属性值缺失的情况下需要解决两个问题：</p><ul><li>（1）如何选择划分属性。</li><li>（2）给定划分属性，若某样本在该属性上缺失值，如何划分到具体的分支上。</li></ul><p>我们提出了：<strong>样本赋权，权重划分</strong></p><h4 id="例子">例子</h4><p>我们给出了含缺失值的西瓜数据集：</p><div align=center><img src="/images/ML-pics/4-25.png" /></div><p>假定为样本集 D 中的每一个样本 x 都赋予一个权重 w<sub>x</sub>，同时我们规定，样本集 D 中对于 属性 α 没有缺失值的集合为 <img src="/images/ML-pics/D_.png" /> ，划分到达根节点中时的权重初始化为1，则定义：</p><div align=center><img src="/images/ML-pics/4-26.png" /></div><p>为了<strong>解决问题 （1）</strong>，我们通过在样本集 D 中选取在属性α上<strong>没有缺失值的样本子集</strong>，计算了在该样本子集上的信息增益，<strong>该信息增益推广为等于样本子集占样本集的<u>比重</u>乘以无缺失样本子集划分后<u>信息增益</u></strong>。即：</p><div align=center><img src="/images/ML-pics/4-28.png" /></div><div align=center><img src="/images/ML-pics/4-27.png" /></div><p>然后为了<strong>解决问题（2）</strong>，若该样本子集在属性α上的值<strong>缺失</strong>，则将该样本以不同的权重（即每个分支所含<strong>无缺失样本比例</strong>）划入到所有分支节点中。该样本在分支节点中的权重变为：</p><div align=center><img src="/images/ML-pics/4-29.png" /></div><blockquote><p>也就是说，缺失值的话，会将该样本划入所有子结点，但是不是 以一个单位来划分，而是以权值划分。这是针对训练集的划分。</p></blockquote><h2 id="4-6-a-name-4-6-单变量与多变量决策树-a">4.6 <a name='4.6'>单变量与多变量决策树</a></h2><p>决策树也分单变量与多变量决策树。</p><h3 id="4-6-1-a-name-4-6-1-单变量决策树-a">4.6.1 <a name='4.6.1'>单变量决策树</a></h3><p>单变量决策树：在每个非叶结点仅考虑一个划分属性。</p><p>但是只是轴平行划分，也就是下图右方那样，形成简单的平行于轴的划分边界。</p><div align=center><img src="/images/ML-pics/4-30.png" /></div>当学习任务所对应的分类边界很复杂时，需要非常多段划分才能获得较好的近似，单变量就不再适用：<div align=center><img src="/images/ML-pics/4-31.png" /></div><h3 id="4-6-2-a-name-4-6-2-多变量决策树-a">4.6.2 <a name='4.6.2'>多变量决策树</a></h3><p>于是便有了多变量决策树。</p><p>多变量决策树：每个非叶结点不仅考虑一个属性</p><p>例如“斜决策树” (oblique decision tree) 不是为每个非叶结点寻找最优划分属性，而是建立一个线性分类器。</p><div align=center><img src="/images/ML-pics/4-32.png" /></div><h2 id="4-7-a-name-4-7-思考-a">4.7 <a name='4.7'>思考</a></h2><div align=center><img src="/images/ML-pics/4-33.png" /></div>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:线性模型</title>
      <link href="/2024/04/15/ML-notes/pages/linear-model/"/>
      <url>/2024/04/15/ML-notes/pages/linear-model/</url>
      
        <content type="html"><![CDATA[<h1 id="3-线性模型">3 线性模型</h1><blockquote><p>由于时间原因，这里只讲解部分内容</p></blockquote><h2 id="3-3-a-name-3-3-对数几率回归-a">3.3 <a name='3.3'>对数几率回归</a></h2><p>虽然只讲这个，但是我们还是要提一提一些概念。</p><h3 id="3-3-1-a-name-3-3-1-前情提要-a">3.3.1 <a name='3.3.1'>前情提要</a></h3><ul><li><strong>线性模型</strong>：其实我们很早就已经与它打过交道，比如我们熟知的“最小二乘法”。这就是线性模型的经典算法之一：根据给定的（x，y）点对，求出一条与这些点拟合效果最好的直线y=ax+b。</li><li><strong>线性回归</strong>：就是试图学到一个线性模型尽可能准确地预测新样本的输出值。</li></ul><div align=center><img src="/images/ML-pics/3-1.png" /></div><ul><li><strong>监督学习</strong>：<a href="/2024/04/14/ML-notes/pages/introduction/" title="ML-notes:绪论">1.绪论</a>的方法分类有提到。</li><li><strong>回归与分类</strong>：我们可以通过线性回归的思想来解决一些分类任务，比如二分类问题。</li></ul><div align=center><img src="/images/ML-pics/3-2.png" /></div><blockquote><p>直观上说，可以规定直线上方的点为正样本(Positive) ，直线下方的点为负样本(Negative) 。本质上说，我们是需要把连续实数值转化为离散值的(例如: 𝟎, 𝟏)：</p><ul><li>比如：对于二分类任务，线性模型预测出来的是 连续值 z = wx + b，所以我们需要将 z  转换为 0/1 值，最理想的就是单位阶跃函数：</li></ul><div align=center><img src="/images/ML-pics/3-3.png" /></div></blockquote><blockquote><p>直观就是我们可以使用一个<strong>线性分类器𝒇(𝒙)</strong>，当𝒙为正类样本，𝒇 (𝒙) &gt; 𝟎，反之， 𝒙 为负类样本，则 𝒇 (𝒙) &lt; 𝟎 。</p></blockquote><blockquote><p>当然这只是一种基本分类思想，我们还需要对分类器的好坏进行度量，也就是上一章的<strong>模型评估与选择</strong>。当前的分类器是无法与标签相对应，自然也无法纠正分类错误，毕竟分类器的输出是线性的，而 标签 是离散的。（分类器 输出范围 [-∞，+∞]，而 标签 可以是{1，0}，{1，-1}）</p></blockquote><blockquote><p>然而单位阶跃函数是不好满足这个条件的，所以就提到了 对数几率函数。</p></blockquote><h3 id="3-3-2-a-name-3-3-2-对数几率函数-a">3.3.2 <a name='3.3.2'>对数几率函数</a></h3><p><strong>回归</strong>就是通过输入的属性值得到一个预测值，利用广义线性模型的特征，是否可以通过一个<strong>联系函数</strong>，将预测值转化为离散值从而进行分类呢？线性几率回归正是研究这样的问题。对数几率引入了一个<strong>对数几率函数（logistic function）</strong>,将预测值投影到 0-1 之间，从而将线性回归问题转化为二分类问题。单位阶跃函数不是一个连续函数，我们引入对数几率函数（logistic function）正好可以替代它：</p><div align=center><img src="/images/ML-pics/3-4.png" /></div>从图3.2可以看出，Logistic Function 对数几率函数是一种“Sigmoid”函数，它将 z 值转化为一个接近0 或 1 的值 y，并且输出值在 z = 0 附近变化很陡。<p>若将 y 视为样本作为正例的可能性，那么 1 - y 就是反例的可能性，则实际上这就是使用线性回归模型的预测结果器逼近真实标记的对数几率。因此这个模型称为 <strong>“对数几率回归”（logistic regression）</strong>，也有一些书籍称之为“逻辑回归”。</p><div align=center><img src="/images/ML-pics/3-8.png" /></div><p>两者的比值，我们称之为 <strong>几率 （odds）</strong>，反应了 x 作为正例的相对可能性，而取对数就得到了 <strong>对数几率（log odds 又称 logit）</strong>。</p><div align=center>几率 （odds）<img src="/images/ML-pics/3-6.png" /></div><div align=center>对数几率（log odds 又称 logit）<img src="/images/ML-pics/3-7.png" /></div><h3 id="3-3-3-a-name-3-3-3-最大似然估计-a">3.3.3 <a name='3.3.3'>最大似然估计</a></h3><p>我们可以使用最大似然估计的方法，求得下述对数几率模型的解 w,b。</p><div align=center><img src="/images/ML-pics/3-9.png" /></div>我们利用极大似然的思想构建目标函数：（3.23 正例概率 3.24 反例概率）<div align=center><img src="/images/ML-pics/3-10.png" /></div>通过极大似然法，针对给定数据集{x,y}求解：<blockquote><p>对数变乘为加，且采用了最大化似然（即所有样本出现真实值的概率乘积最大）</p></blockquote><div align=center><img src="/images/ML-pics/3-11.png" /></div><h3 id="3-3-4-a-name-3-3-4-对数几率模型-a">3.3.4 <a name='3.3.4'>对数几率模型</a></h3><div align=center><img src="/images/ML-pics/3-12.png" /></div>所以：<div align=center><img src="/images/ML-pics/3-13.png" /></div><h4 id="3-3-4-1-a-name-3-3-4-1-牛顿法-newton-s-method-a">3.3.4.1 <a name='3.3.4.1'>牛顿法（Newton’s Method）</a></h4><p>牛顿法有两种应用方向，1、目标函数最优化求解， 2、方程的求解（根）</p><p>核心思想是对函数进行泰勒展开。</p><ul><li>方程求解：</li></ul><div align=center><img src="/images/ML-pics/3-15.png" /></div>用牛顿法可以解非线性方程，它是把非线性方程 f(x)=0 线性化的一种近似方法。把f(x)在点x0的某邻域内展开成泰勒级数。<div align=center><img src="/images/ML-pics/3-14.png" /></div>取其线性部分（即泰勒展开的前两项），并令其等于0，即<div align=center><img src="/images/ML-pics/3-16.png" /></div>以此作为非线性方程f(x)=0 的近似方程，若f’(xo)不为0，则其解为<div align=center><img src="/images/ML-pics/3-17.png" /></div>这样，得到牛顿迭代法的一个迭代关系式：<div align=center><img src="/images/ML-pics/3-18.png" /></div><div align=center><img src="/images/ML-pics/3-19.png" /></div><h4 id="3-3-4-2-a-name-3-3-4-2-梯度下降法-a">3.3.4.2 <a name='3.3.4.2'>梯度下降法</a></h4><p>梯度下降（gradient descent）在机器学习中应用十分的广泛，不论是在线性回归还是Logistic回归中，它的主要目的是通过迭代找到目标函数的最小值，或者收敛到最小值。</p><div align=center><img src="/images/ML-pics/3-20.png" /></div><p>我们有个<strong>可微分</strong>的函数，它代表一座山。我们的目标是找到山底。<strong>梯度</strong>的方向是函数变化最快的方向也就是平地上最陡的方向。所以梯度下降的步骤是这样的：</p><ul><li>从一个出发点出发，我们开始求出发点的梯度</li><li>向梯度方向的<strong>负方向</strong>行走一个步长</li><li>重复求取梯度，重复行走步长</li><li>直到走到底</li></ul><h3 id="3-3-5-a-name-3-3-5-总结-a">3.3.5 <a name='3.3.5'>总结</a></h3><div align=center><img src="/images/ML-pics/3-21.png" /></div><ul><li>牛顿法和梯度下降法是求解最优化问题的常见的两种算法。</li><li>前者使用割线逐渐逼近最优解，后者使得目标函数逐渐下降。</li><li>牛顿法的收敛速度快，但是需要二阶导数信息。</li><li>梯度下降法计算速度快，但是需要人工确认步长参数。</li><li>极大似然法：</li></ul><div align=center><img src="/images/ML-pics/3-22.png" /></div>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:模型评估与选择</title>
      <link href="/2024/04/15/ML-notes/pages/model-evaluation/"/>
      <url>/2024/04/15/ML-notes/pages/model-evaluation/</url>
      
        <content type="html"><![CDATA[<h1 id="2-模型评估与选择">2 模型评估与选择</h1><h2 id="1-a-name-1-经验误差与过拟合-a">1. <a name='1'>经验误差与过拟合</a></h2><h3 id="1-1-a-name-1-1-经验-experiences-a">1.1 <a name='1-1'>经验 Experiences</a></h3><blockquote><p>Experience = The data we have for training the machine learning model.</p></blockquote><p>对于特定机器学习任务，<strong>已存在的可利用数据</strong>即是解决该机器学习任务的<strong>经验</strong>。而在这个大数据时代，大数据=丰富经验=训练更好的机器学习模型。</p><h3 id="1-2-a-name-1-2-数据划分-a">1.2 <a name='1-2'>数据划分</a></h3><p>通常我们会对获取到的数据进行数据划分，也就是我们绪论提到的一些学术用语：</p><div align=center><img src="/images/ML-pics/2-1.png" /></div><ul><li><strong>训练集 Training Set</strong>：用来训练模型或确定参数。</li><li><strong>测试集 Testing Set</strong>：测试已经训练好的模型的推广能力。</li><li><strong>验证集 Validation Set</strong>（可选）：是模型训练过程中单独留出的样本集，它可以用于调整模型的超参数和用于对模型的能力进行初步评估。用来做模型选择（Model Selection），即模型的最终优化及选择。</li></ul><h3 id="1-3-a-name-1-3-误差与精度-a">1.3 <a name='1-3'>误差与精度</a></h3><h4 id="误差-error">误差 Error</h4><p>我们将学习器对样本的<strong>实际预测结果与样本的真实值之间的差异</strong>称之为<strong>误差（error）</strong>。而误差包含三类：</p><ul><li><strong>训练误差 training error 或 经验误差 empirical error</strong>：学习器在训练集上的误差。</li><li><strong>泛化误差generalization error</strong>：学习器在新样本的误差，也就是实际误差。</li><li><strong>测试误差Testing Error</strong>：学习器在测试集上的误差，用来近似泛化误差。因为对于实际误差总是变化着的，所以我们一般用测试误差来近似泛化误差。</li></ul><h4 id="经验误差vs-泛化误差">经验误差vs.泛化误差</h4><ul><li><strong>经验误差</strong>：在训练集上的误差，训练误差</li><li><strong>泛化误差</strong>：在新样本上的误差，实际误差</li></ul><blockquote><p>是不是两个误差都越小越好？</p></blockquote><blockquote><p>不，因为会出现过拟合 overfitting</p></blockquote><h3 id="1-4-a-name-1-4-过拟合-overfitting-vs-欠拟合-underfitting-a">1.4 <a name='1-4'>过拟合(overfitting) vs. 欠拟合(underfitting)</a></h3><div align=center><img src="/images/ML-pics/2-2.png" /></div><p>我们以叶子为例子，如图所示，过拟合的话，会认为树叶必须有锯齿，欠拟合的话，认为绿色都是树叶。所以误差过小或过大，都会与预期结果不符。</p><h4 id="我的定义">我的定义</h4><ul><li><strong>过拟合（over-fitting）</strong>：所建立的机器学习模型或者是深度学习模型在训练样本中表现得过于优越，导致在验证集以及测试集中表现不佳。</li><li><strong>欠拟合（under-fitting）</strong>：训练样本被提取的特征较少，导致训练出来的模型不能很好地匹配，导致表现不佳，甚至样本本身都无法高效的识别。</li></ul><blockquote><p>非官方解释</p></blockquote><p><u>所以我们发现 一个模型的评估与选择是多么的重要。</u></p><h2 id="2-a-name-2-模型选择-a">2. <a name='2'>模型选择</a></h2><p>模型选择主要是回答三个问题，也就是下面我们讲的三个问题：</p><ul><li>如何获得测试结果？ -&gt; <strong>2.1 评估方法</strong></li><li>如何评估性能优劣？ -&gt; <strong>2.2 性能度量</strong></li><li>如何判断实质差别？ -&gt; <strong>2.3 比较检验</strong></li></ul><h3 id="2-0-a-name-2-0-典型的机器学习过程-a">2.0 <a name='2-0'>典型的机器学习过程</a></h3><p>我认为通常机器学习分五步：</p><ul><li><strong>得到数据</strong>：机器学习过程中，最重要并且困难的通常都是<strong>清理和预处理数据</strong>。除开直接得到的数据外，一般数据都需要数据挖掘、数据清洗、特征工程、数据转换、特征提取等一系列数据准备工作。</li><li><strong>模型选择</strong>：得到数据后，我们需要针对不同的问题和任务选取恰当的模型，而<strong>模型就是一组函数的集合</strong>。</li><li><strong>确定标准</strong>：选取到适合的模型后，我们需要确定一个衡量标准，也就是我们通常说的 <strong>损失函数（Loss Function）</strong> 来衡量模型函数的好坏。</li><li><strong>得到函数</strong>：最后也是困难的也是这一步 <strong>Pick the “Best” Function</strong>，我们需要进行多次训练，从众多函数中得到 Loss 最小的一个。通常会使用一些 梯度下降法、最小二乘法等技巧来选择。</li><li><strong>测试</strong>：学习得到“最好”的函数后，需要在<strong>新样本上进行测试</strong>，只有在新样本上表现很好，才算是一个“好”的函数。</li></ul><h4 id="调参">调参</h4><h5 id="概念">概念</h5><p>大多数学习算法都有些<strong>参数(parameter) 需要设定</strong>，参数配置不同，学得模型的性能往往有显著差别，这就是通常所说的<strong>参数调节或调参</strong> (parameter tuning)。</p><h5 id="如何调参">如何调参</h5><p>学习算法的很多参数是在实数范围内取值，因此，对每种参数取值都训练出模型来是不可行的。常用的做法是：<strong>对每个参数选定一个范围和步长λ</strong>，这样使得学习的过程变得可行。</p><p>例如：假定算法有 k 个参数，每个参数仅考虑 j 个候选值，这样对每一组训练/测试集就会有 k^j 个模型需考察。</p><blockquote><p>当重新调参之后就要重新训练模型，所以调参的时间代价是很大的。</p></blockquote><h5 id="验证集">验证集</h5><p>我们在<a href="#1-2">数据划分</a>的时候有说到<strong>验证集</strong>，有验证集的模型训练步骤是这样的：先在训练集上训练，验证集上做测试，重复以上步骤选出最好的模型，把训练集和验证集并到一起做训练，在测试集上最后测试。</p><p>也就是：算法参数设定后，要用“训练集+验证集”重新训练最终模型。而测试集，是用来评估最终模型的。</p><h3 id="2-1-a-name-2-1-评估方法-a">2.1 <a name='2-1'>评估方法</a></h3><p>评估方法描述了<strong>如何获得测试结果</strong>。而它的关键便是：怎么获得“测试集”(test set)。一般来说，我们应该保证<strong>测试集应该与训练集“互斥”</strong>。</p><p>所以我们常见的方法如下：</p><ul><li><strong>留出法(hold-out)</strong></li><li><strong>交叉验证法(cross validation)</strong></li><li><strong>自助法(bootstrap)</strong></li></ul><h4 id="2-1-1-a-name-2-1-1-留出法-a">2.1.1 <a name='2-1-1'>留出法</a></h4><div align=center><img src="/images/ML-pics/2-3.png" /></div><p>将数据集 D 划分为<strong>两个互斥的集合</strong>，一个作为训练集 S，一个作为测试集 T，满足 D=S∪T 且 S∩T=∅ ，常见的划分为：大约2/3-4/5的样本用作训练，剩下的用作测试。</p><blockquote><p>留出就是说，数据集的一部分作为训练集，剩下的留给测试集</p></blockquote><p><strong>注意事项：</strong></p><ul><li><strong>保持数据分布一致性</strong></li></ul><blockquote><p>（避免因数据划分过程引入额外的偏差而对最终结果产生影响，例如分类任务中<strong>保持两个数据集（S、T）样本的类别比例相似</strong>，也就是<strong>分层采样</strong>)</p></blockquote><ul><li><strong>多次重复划分</strong></li></ul><blockquote><p>(单次使用留出法得到的估计结果往往不够稳定可靠，需要多次实验)</p></blockquote><ul><li><strong>测试集不能太大、不能太小</strong></li></ul><blockquote><p>(<strong>测试集小</strong>时，评估结果的方差就比较大，<strong>训练集小</strong>时，评估结果的偏差较大。常见值：1/5~1/3，测试集至少应含30个样例<br>[Mitchell, 1997])</p></blockquote><h4 id="2-1-2-a-name-2-1-2-交叉验证法-a">2.1.2 <a name='2-1-2'>交叉验证法</a></h4><div align=center><img src="/images/ML-pics/2-4.png" /></div><p>将数据集D<strong>等分为k份相互不重叠的子集</strong>，每次<strong>取1份子集作为测试集，其余子集作为训练集</strong>。重复k次，直至所有子集都作为测试集进行过一次实验评估，最后取平均值。我们也称之为 <strong>k 折交叉认证</strong>。</p><p><strong>同样为保证数据分布一致性</strong>，即为减少因样本划分不同而引入的差别，一般会随机使用不同划分重复p次，比如10次10折交叉验证。</p><h4 id="2-1-3-a-name-2-1-3-自助法-a">2.1.3 <a name='2-1-3'>自助法</a></h4><p>自助法比较好理解，<strong>又称可放回采样</strong>。和我们学的概率论的可放回抽取类似：</p><p>假设有m个样本，每次采一个作为测试集，采到的概率是1/m，采不到的概率是(1-1/m)，采m次还采不到，概率为 (1-1/m) 的m次方。</p><div align=center><img src="/images/ML-pics/2-5.png" /></div>那么我们可以计算得到，其实最终约有 36.8% 的样本是不在训练集中的。这种方法取出的测试样本在数据集D中比例一般在25%~36.8%之间。<blockquote><p>它常用于数据集较小或难以有效划分训练/测试集情况。因为<strong>数据分布有所改变，会引入估计误差</strong>，初始数据量比较足够时，前两种方法更常用。</p></blockquote><h3 id="2-2-a-name-2-2-性能度量-a">2.2 <a name='2-2'>性能度量</a></h3><p><strong>性能度量(performance measure)</strong> 是衡量模型泛化能力的评价标准，反映了任务需求。使用不同的性能度量往往会导致不同的评判结果。</p><p>比如 回归(regression) 任务常用<strong>均方误差</strong>衡量性能：</p><div align=center><img src="/images/ML-pics/2-6.png" /></div><h4 id="2-2-1-a-name-2-2-1-错误率与精度-a">2.2.1 <a name='2-2-1'>错误率与精度</a></h4><p>对于样例 D：</p><ul><li><strong>错误率（error rate）</strong>：被错误分类的样本在总样本中的比例。</li></ul><div align=center><img src="/images/ML-pics/2-7.png" /></div><ul><li><strong>精度（accuracy）</strong>：被正确分类的样本在总样本中的比例，即（1 – 错误率）</li></ul><div align=center><img src="/images/ML-pics/2-8.png" /></div><blockquote><p>西瓜为例，<strong>错误率是</strong>有多少比例的瓜被判别错误。若关心“挑出的西瓜中有多少比例是好瓜”，或者“所有好瓜中有多少比例被挑了出来”，错误率就不够用了，需要使用其他性能度量。</p></blockquote><blockquote><p>有些需求在信息检索、Web搜索等应用中经常出现，例如在信息检索中，我们经常会关心“<strong>检索出的信息中有多少比例是用户感兴趣的</strong>”“<strong>用户感兴趣的信息中有多少被检索出来了</strong>”.<strong>“ 查准率”(precision)与“查全率”(recal)是更为适用于此类需求的性能度量.</strong></p></blockquote><h4 id="2-2-2-a-name-2-2-2-查全率-查准率-a">2.2.2 <a name='2-2-2'>查全率、查准率</a></h4><div align=center><img src="/images/ML-pics/2-9.png" /></div><ul><li>解释：<ul><li>FN: Fault Negative Example 错反例（错认为是反例）</li><li>FP: Fault Positive Example 错正例（错认为是正例）</li><li>其他的反之亦然</li></ul></li><li><strong>查准率、准确率(Precision)</strong>：预测为正的样例中有多少是真正的正样例（你认为的正例，有百分之多少是对的）<ul><li><strong>P = TP/(TP+FP)</strong></li></ul></li><li><strong>查全率、召回率(Recall)</strong>：样本中的正例有多少被预测正确（正例样本有百分之多少被你预测到了）<ul><li><strong>R = TP/(TP+FN)</strong></li></ul></li><li><strong>精度（accuracy）</strong>：被正确分类的样本在总样本中的比例（所有样本中预测正确的占百分之多少）<ul><li><strong>A=(TP+TN)/(TP+FN+TN+FP)</strong></li></ul></li></ul><h4 id="a-name-p-r-p-r曲线-a"><a name='p-r'><strong>P-R曲线</strong></a></h4><ul><li><p><strong>问题</strong></p><ul><li>查准率和查全率是一对矛盾的度量</li><li><strong>查全率</strong>是希望将好瓜尽可能多地挑选出来，所以选的瓜越多其实查全率也就越大。</li><li><strong>查准率</strong>是选出的好瓜里面有多少是真正的好瓜，只选有把握的瓜查准率也就越大。</li><li>但是这么看来，保证查准率的话，难免会漏掉好瓜，查全率得不到保证。</li></ul></li><li><p><strong>P-R曲线</strong></p><ul><li>“P-R曲线”正是描述查准/查全率之间关系的曲线</li><li><strong>定义</strong>：根据学习器的预测结果按正例可能性大小（与阈值之差）对样例进行排序，并逐个把样本作为正例计算P和R，得到很多个P和R，形成P-R图。</li></ul>  <div align=center>  <img src="/images/ML-pics/2-10.png" />  </div><ul><li>一般来说，曲线下的面积是很难进行估算的，所以衍生出了 <strong>“平衡点”（Break-Event Point，简称BEP）</strong>，即当P=R时的取值，平衡点的取值越高，性能更优。</li><li>当然 BEP 其实也太简化了一点，所以我们引入了新的度量方法：<strong>F-Measure</strong>。即 F 度量。</li></ul></li><li><p><strong>F-Measure</strong></p><ul><li>常用的是 <strong>F1 度量</strong>：(基于 P R 的调和平均值)</li></ul>  <div align=center>  <img src="/images/ML-pics/2-11.png" />  </div><ul><li>然而有时候我们对查全率和查准率的要求有偏差，这个时候我们就需要修改它们的权重，所以又引入了<strong>F<sub>β</sub> 度量</strong>：（基于 P R 的加权平均值）</li></ul>  <div align=center>  <img src="/images/ML-pics/2-12.png" />  </div><blockquote><p>β &gt; 1 时 R 查全率 有更大权重，β &lt; 1 时 P 查准率 有更大权重。β = 1 时，则为 F1 度量。</p></blockquote></li></ul><h4 id="a-name-m-m-macro-宏观-vs-micro-微观-a"><a name='m-m'>macro 宏观 vs micro 微观</a></h4><p>有时候我们会有多个二分类混淆矩阵，例如：多次训练或者在多个数据集上训练，那么估算全局性能的方法有两种，分为<strong>宏观和微观</strong>。</p><p>简单理解：</p><ul><li><strong>宏观</strong>就是先算出每个混淆矩阵的P值和R值，然后取得平均P值macro-P和平均R值macro-R，再算出F<sub>β</sub>或F<sub>1</sub>，</li><li><strong>微观</strong>则是计算出混淆矩阵的平均TP、FP、TN、FN，接着进行计算P、R，进而求出F<sub>β</sub>或F<sub>1</sub>。</li></ul><div align=center><img src="/images/ML-pics/2-13.png" /></div><h4 id="a-name-r-a-roc-与-aoc-a"><a name='r-a'>ROC 与 AOC</a></h4><p>如上所述：学习器对测试样本的<strong>评估结果</strong>一般为<strong>一个实值或概率</strong>，然后将这个预测值与一个 <strong>分类阈值(threshold)</strong> 比较，若大于阈值则分为正类，否则为反类，也就完成了分类。</p><blockquote><p>学习器也就是分类器。</p></blockquote><h5 id="概念">概念</h5><p>根据这个实值或概率预测结果，可将测试样本进行排序，“最可能”是正例的排在最前面，“最不可能”是正例的排在最后面。这种分类过程相当于在这个排序中以某个 <strong>“截断点”(cut point)</strong> 将样本分为两部分。根据任务需求采用<strong>不同截断点</strong>：更<strong>重视“查准率”</strong>，选择<strong>靠前</strong>的位置截断；更<strong>重视“查全率”</strong>，则从<strong>靠后</strong>的位置截断。</p><blockquote><p>其实通俗来说的话，就是分类器会将测试样本评估，并给它们评分，然后按照评分排序，之后根据你侧重 P 还是 R 来设置一个截断点作为下次预测的判断依据。比如 你设置截断点 75分以上是 优秀，75分以下是 差，那就是我要求比较低；我设置 90分以上是 优秀，90分以下是 差，那就是我要求比较高。这是同一个道理。</p></blockquote><p>因此，排序本身的质量好坏，就体现了 “一般情况下”泛化性能的好坏。</p><p>而 <strong>ROC曲线</strong> 正是从这个角度出发来研究学习器的泛化性能，ROC曲线与P-R曲线十分类似，都是按照排序的顺序逐一按照正例预测，不同的是ROC曲线以“真正例率”（True Positive Rate，简称TPR）为横轴，纵轴为“假正例率”（False Positive Rate，简称FPR），<strong>ROC偏重研究基于测试样本评估值的排序好坏</strong>。</p><blockquote><p>TPR = R ，TPR 和 FPR 可以看作 正例成功率 和 反例失败率，也就是 真正例TP占真正例的比例，假正例FP占真反例的比例。</p></blockquote><div align=center><img src="/images/ML-pics/2-14.png" /></div><div align=center><img src="/images/ML-pics/2-15.png" /></div>简单分析图像，可以得知：当FN=0时，TN也必须0（TPR = FPR = 1），反之也成立，我们可以画一个队列，试着使用不同的截断点（即阈值）去分割队列，来分析曲线的形状，（0,0）表示将所有的样本预测为负例，（1,1）则表示将所有的样本预测为正例，（0,1）表示正例全部出现在负例之前的理想情况，（1,0）则表示负例全部出现在正例之前的最差情况。<br><br><h5 id="绘图">绘图</h5><p>现实中的任务通常都是有限个测试样本，因此只能绘制出近似ROC曲线。绘制方法：首先根据测试样本的评估值对测试样本排序，接着按照以下规则进行绘制:</p><blockquote><p>其实就是绘制 最大阈值时 的点 和 最小阈值时 的点，及其每个样本作为阈值的 点，构成一个离散点集，得到近似ROC曲线。</p></blockquote><div align=center><img src="/images/ML-pics/2-16.png" /></div><h5 id="评估">评估</h5><p>同样地，进行模型的性能比较时，若一个学习器A的ROC曲线被另一个学习器B的ROC曲线<strong>完全包住</strong>（所有点更靠近（1，1）），则称B的性能优于A。</p><p>若A和B的曲线发生了交叉，则谁的曲线下的面积大，谁的性能更优。</p><p>所以就引出 ROC曲线下的面积 我们定义为<strong>AUC（Area Uder ROC Curve）</strong>，<strong>不同于P-R的是，这里的AUC是可估算的</strong>，即AOC曲线下每一个小矩形的面积之和。</p><div align=center><img src="/images/ML-pics/2-17.png" /></div><p>易知：AUC越大，证明排序的质量越好，AUC为1时，证明所有正例排在了负例的前面，AUC为0时，所有的负例排在了正例的前面，这两种情况其实都属于最理想的情况。（不过 AUC 为 0 肯定是 分类出问题了）</p><div align=center><img src="/images/ML-pics/2-18.png" /></div><h4 id="2-2-3-a-name-2-2-3-代价敏感错误率与代价曲线-a">2.2.3 <a name='2-2-3'>代价敏感错误率与代价曲线</a></h4><p>上面的方法中，将学习器的犯错同等对待，但在现实生活中，将正例预测成假例与将假例预测成正例的代价常常是不一样的，例如：好瓜预测为坏瓜，顶多损失了好瓜；而坏瓜预测为好瓜，吃了会中毒，这是不一样的代价。</p><p>所以以二分类为例，由此引入了“代价矩阵”（cost matrix）。</p><div align=center><img src="/images/ML-pics/2-19.png" /></div><p>在非均等错误代价下，我们希望的是最小化“总体代价”，这样“代价敏感”的错误率（2.5.1节介绍）为：</p><div align=center><img src="/images/ML-pics/2-20.png" /></div>同样对于ROC曲线，在非均等错误代价下，演变成了“代价曲线”，在这里就不介绍了。<h3 id="2-3-a-name-2-3-比较检验-a">2.3 <a name='2-3'>比较检验</a></h3><p>在某种度量下取得评估结果后，我们是否可以直接比较以评判优劣？</p><p>不是这样的：</p><ul><li>测试性能不等于泛化性能</li><li>测试性能随着测试集的变化而变化</li><li>很多机器学习算法本身有一定的随机性</li></ul><p>我们的机器学习，也只是所谓的 “概率近似正确”，而不是真正的泛化。</p><p>我们可以根据数据集以及模型任务的特征，选择出最合适的评估和性能度量方法来计算出学习器的“测试误差”。但由于“测试误差”受到很多因素的影响，测试集的不同也会影响算法的评估，同时测试误差是作为泛化误差的近似，并不能代表学习器真实的泛化性能。所以我们提出了 比较检验 来对单个或多个学习器在不同或相同测试集上的性能度量结果做比较。</p><h4 id="2-3-1-a-name-2-3-1-假设检验-a">2.3.1 <a name='2-3-1'>假设检验</a></h4><p><strong>“假设”指的是对样本总体的分布或已知分布中某个参数值的一种猜想</strong>，例如：假设总体服从泊松分布，或假设正态总体的期望u=u0。回到本篇中，我们可以通过测试获得测试错误率，但直观上测试错误率和泛化错误率相差不会太远，因此可以通过测试错误率来推测泛化错误率的分布，<strong>这就是一种假设检验</strong>。</p><p><strong>统计假设检验(hypothesis test)</strong> 为学习器性能比较提供了重要依据。</p><p>学习器的性能比较常用方法如下：</p><ul><li><h4 id="2-3-1-1-a-name-2-3-1-1-两学习器比较-a">2.3.1.1 <a name='2-3-1-1'><strong>两学习器比较</strong></a></h4><ul><li>交叉验证t 检验(基于成对t 检验)</li></ul>  <div align=center>  <img src="/images/ML-pics/2-21.png" />  </div><blockquote><p>k 折交叉验证中训练集、测试集会产生重叠，可以通过5次2折交叉验证，使用第一次的两对差值计算均值，使用全部的差值对（即10对）计算方差，可以有效的避免这个问题。</p></blockquote><ul><li>McNemar 检验(基于列联表，卡方检验)</li></ul><blockquote><p>主要思想是：若两学习器的性能相同，则A预测正确B预测错误数应等于B预测错误A预测正确数，即e01=e10，且|e01-e10|服从N（1，e01+e10）分布。</p></blockquote></li><li><h4 id="2-3-1-2-a-name-2-3-1-2-多学习器比较-a">2.3.1.2 <a name='2-3-1-2'><strong>多学习器比较</strong></a></h4><ul><li><p>Friedman + Nemenyi</p><ul><li>Friedman检验(基于序值，F检验; 判断”是否都相同”)</li></ul><blockquote><p>F检验可以在多组数据集进行多个学习器性能的比较，基本思想是在同一组数据集上，根据测试结果（例：测试错误率）对学习器的性能进行排序，赋予序值1,2,3…，相同则平分序值.</p></blockquote><blockquote><p>比如：以下是三个算法 ABC 在 四个数据集上的 序值。比如 D1 中，A 最好，B 其次，C 最差。</p></blockquote>  <div align=center>  <img src="/images/ML-pics/2-22.png" />  </div><blockquote><p>若学习器的性能相同，则它们的平均序值应该相同，且第i个算法的平均序值ri服从正态分布N（（k+1）/2，（k+1）(k-1)/12），则有：</p></blockquote>  <div align=center>  <img src="/images/ML-pics/2-23.png" />  </div>  <div align=center>  <img src="/images/ML-pics/2-24.png" />  </div>  * Nemenyi 后续检验(基于序值，进一步判断两两差别)<blockquote><p>Friedman 检验检测出来所有算法都 “相同”，那么就它们的差别不显著，则需要进行 后续检验，Nemenyi 就是一个常用的方法。</p></blockquote><blockquote><p>Nemenyi检验计算出平均序值差别的临界值域，下表是常用的qa值，若两个算法的平均序值差超出了临界值域CD，则相应的置信度1-α拒绝“两个算法性能相同”的假设。</p></blockquote>  <div align=center>  <img src="/images/ML-pics/2-25.png" />  </div>  <div align=center>  <img src="/images/ML-pics/2-26.png" />  </div></li></ul></li></ul><h2 id="3-a-name-3-偏差与方差-a">3 <a name='3'>偏差与方差</a></h2><p>在 <a href="#1-3">1.3 误差与精度</a> 我们讲过误差，那么误差到底包含了哪些因素，或者说，如何从机器学习的角度来解释误差从何而来？</p><p>这里我们就要提到<strong>偏差与方差</strong>。<strong>偏差-方差分解</strong>是解释学习器泛化性能的重要工具。在学习算法中，偏差指的是预测的期望值与真实值的偏差，方差则是每一次预测值与预测值得期望之间的差均方。实际上，偏差体现了学习器预测的准确度，而方差体现了学习器预测的稳定性。</p><div align=center><img src="/images/ML-pics/2-27.png" /></div><p>但是 一般而言，偏差与方差存在冲突，这就是常说的偏差-方差窘境（bias-variance dilamma）：</p><ul><li><strong>训练不足</strong>时，学习器拟合能力不强，偏差主导了泛化错误率（欠拟合）</li><li>随着<strong>训练程度加深</strong>，学习器拟合能力逐渐增强，方差逐 渐主导了泛化错误率</li><li><strong>训练充足</strong>后，学习器的拟合能力很强，方差主导了泛化错误率（过拟合）</li></ul><div align=center><img src="/images/ML-pics/2-28.png" /></div>这也就是绪论所说的拟合的几个情况。]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:绪论</title>
      <link href="/2024/04/14/ML-notes/pages/introduction/"/>
      <url>/2024/04/14/ML-notes/pages/introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="1-绪论">1 绪论</h1><h2 id="1-a-name-1-概念-a">1. <a name='1'>概念</a></h2><p>机器学习是从人工智能中产生的一个重要学科分支，是实现智能化的关键。</p><p><strong>机器学习</strong>是一类算法的总称，这些算法企图从大量历史数据中挖掘出其中隐含的规律，并用于预测或者分类，更具体的说，机器学习可以看作是寻找一个函数，输入是样本数据，输出是期望的结果，只是这个函数过于复杂，以至于不太方便形式化表达。也就是<strong>经典定义</strong>：<u>利用经验改善系统自身的性能。（从 经验到数据 的过程）</u></p><p>在计算机系统中，<strong>经验</strong>通常以<strong>数据</strong>形式存在，因此，机器学习研究的主要内容，是关于在计算机上<strong>从数据中产生模型</strong>的算法，即<strong>学习算法</strong>。</p><blockquote><p>“Learning is any process by which a system improves performance from experience.”<br>– Herbert Simon</p></blockquote><blockquote><p>Machine learning aims to study Approaches which improve the Performance of a machine at a specific Task with Experiences.</p></blockquote><blockquote><p>也就是说 <strong>机器学习 = 任务 + 方法 + 经验 + 性能</strong></p></blockquote><h2 id="2-a-name-2-三个概念之间的关系-a">2. <a name='2'>三个概念之间的关系</a></h2><p>当学到机器学习最容易问的就是 三个概念 之间的关系了：机器学习、深度学习、人工智能。其实关系如下图一样：</p><div align=center><img src="/images/ML-pics/1-1.png" /></div><ul><li><strong>机器学习</strong>是人工智能的一个子领域，是<strong>人工智能的核心</strong></li><li><strong>深度学习</strong>是机器学习的一个子领域，是目前最火的<strong>方向</strong></li><li><strong>机器学习是从数据通往智能的技术途径，是现代人工智能的本质</strong></li></ul><p>由机器学习也延展出很多技术：</p><div align=center><img src="/images/ML-pics/1-2.png" /></div><h2 id="3-a-name-3-taep-a">3. <a name='3'>TAEP</a></h2><h3 id="3-1-a-name-3-1-概念-a">3.1. <a name='3-1'>概念</a></h3><p>通常描述机器学习的应用用 TAEP 来描述：</p><ul><li>任务-Task：机器学习要解决的问题（研究对象）</li><li>方法-Approach：各种机器学习方法（核心内容）</li><li>经验-Experience：训练模型的数据、实例（动力源泉）</li><li>性能-Performance：方法针对任务的性能评估准则（检验指标）</li></ul><h3 id="3-2-a-name-3-2-例子-a">3.2. <a name='3-2'>例子</a></h3><ul><li>T：人脸识别<ul><li>A：线性回归</li><li>E：已标定身份的人脸图片数据</li><li>P：人脸识别准确率</li></ul></li><li>T：象棋博弈<ul><li>A: 人工神经网络</li><li>E: 指令化棋谱</li><li>P: 对随机对手的获胜比率</li></ul></li><li>T：股价预测<ul><li>A: 多项式回归</li><li>E: 不同股票近三年各交易日股价数据</li><li>P: 估价误差（方差）</li></ul></li></ul><h2 id="4-a-name-4-基本任务-a">4. <a name='4'>基本任务</a></h2><p>机器学习有四个基本任务，所有的机器学习的应用与子领域都是这几个基本任务组成的：</p><ul><li>回归（Regression）</li><li>分类（Classification）</li><li>聚类（Clustering）</li><li>表征（Representation）</li></ul><h3 id="4-1-a-name-4-1-回归-regression-a">4.1 <a name='4-1'>回归（Regression）</a></h3><p>回归，是一种分析手段，用于<strong>解决预测问题</strong>。除开逻辑回归外，它一般是用于预测连续型数据，<strong>等价于函数拟合</strong>。可以用于形状分析、表情分析、运动分析等</p><blockquote><p>就像炒菜一样，我们每次都会尝一口，然后根据与理想味道的偏差来加料或者补水，最终得到最理想的结果；下次炒菜的时候，我们就有了这么个模型，可以预测到大概需要的调料数量，得到理想的结果。也是数据（经验）到模型的过程。</p></blockquote><p>它最早源自于<strong>高尔顿和学生皮尔逊</strong>发现的一个神奇的生物遗传现象：如果父母双亲都比较高一些，那么生出的子女身高会低于父母的平均身高；反之，如果父母双亲都比较矮一些，那么生出的子女身高要高于父母平均身高。同样体重也如此，它们总是会向一个标准数值回归。</p><div align=center><img src="/images/ML-pics/1-3.png" /></div><h3 id="4-2-a-name-4-2-分类-classification-与-聚类-clustering-a">4.2 <a name='4-2'>分类（Classification）与 聚类（Clustering）</a></h3><p>分类和聚类一起讲，是因为它们其实非常像，唯一的区别就是一个是有监督学习，一个是无监督学习。（监督指的是学习时样本有无标签）</p><p><strong>分类</strong>是根据一些给定的已知类别标号的样本，训练某种学习机器（即得到某种目标函数），使它能够对未知类别的样本进行分类。</p><p>一般用于：</p><ul><li>分类（图像、视频、文本………）</li><li>识别（语音、人脸、指纹…….）</li><li>检测（行人、车辆、军事目标…….）</li></ul><div align=center><img src="/images/ML-pics/1-4.png" /></div><p><strong>聚类</strong>是给定一些无标签样本，将其分成由类似对象组成的多个类。</p><p>一般用于：</p><ul><li>分割（图像、视频）、背景建模</li><li>数据挖掘、数据恢复</li><li>字典学习（视觉信息，文本）</li></ul><div align=center><img src="/images/ML-pics/1-5.png" /></div><h3 id="4-3-a-name-4-3-表征-representation-a">4.3 <a name='4-3'>表征（Representation）</a></h3><p>表征用于特征提取，是一种将原始数据转换成为更容易被机器学习应用的数据的过程，也就是为前面三个任务解决数据的问题，它一般用于数据重构和信息检索。</p><h2 id="5-a-name-5-方法分类-a">5. <a name='5'>方法分类</a></h2><p>我们可以根据学习形式进行方法分类，就像之前提到分类和聚类的区别一样，<br>我们将学习方法分为：</p><ul><li><strong>有监督学习（Supervised Learning）</strong><ul><li>数据都有明确的标签，根据机器学习产生的模型可以将新数据分到一个明确的类或得到一个预测值。</li><li>典型：支持向量机、贝叶斯分类器、决策树、线性判别分析…….</li></ul></li><li><strong>无监督学习（Unsupervised Learning）</strong><ul><li>数据没有标签，机器学习出的模型是从数据中提取出来的模式（提取决定性特征或者聚类等）</li><li>典型：K均值、Meanshift、主成分分析、典型相关分析……</li></ul></li><li><strong>半监督学习（Semi-supervised Learning）</strong><ul><li>部分数据有明确的标签，根据机器学习产生的模型可以将新数据分到一个明确的类或得到一个预测值。</li><li>典型：图直推学习、超图直推学习……</li></ul></li></ul><h2 id="6-a-name-6-基本术语-a">6. <a name='6'>基本术语</a></h2><p>我们以西瓜书上的例子来讲：</p><blockquote><p>假设我们收集了一批西瓜的数据，例如：（色泽=青绿;根蒂=蜷缩;敲声=浊响)， (色泽=乌黑;根蒂=稍蜷;敲声=沉闷)， (色泽=浅自;根蒂=硬挺;敲声=清脆)……每对括号内是一个西瓜的记录。</p></blockquote><p>那么：</p><ul><li><strong>数据集（dataset）</strong>：所有数据的集合。（所有的西瓜数据）</li><li><strong>示例（instance）或样本（sample）</strong>：每一条数据。（某一个西瓜的数据）</li><li><strong>样例（example）</strong>：有标签的示例。（西瓜数据包括西瓜类型）</li><li><strong>特征（feature）或属性（attribute）</strong>：单个特点。属性即事物本身所固有的性质。特征即一事物异于其他事物的特点。（色泽或根缔或敲声）</li><li><strong>属性空间, 样本空间, 输入空间, 假设空间，版本空间</strong>：都是属性张成的空间，但是里面包含不同的点。</li><li><strong>假设空间</strong>：包含所有可能的假设点的空间（比如所有属性组合的西瓜数据点）。</li><li><strong>版本空间（version space）</strong>： 与训练集一致的假设集合，是通过训练集筛选过的假设空间，它随训练集而变化。</li><li><strong>特征向量</strong>：一条记录在对应空间中对应的坐标向量。（我们可以称每个西瓜记录都是一个特征向量，如（色泽=青绿;根蒂=蜷缩;敲声=浊响)）</li><li><strong>特征空间</strong>：排除线性相关和对模型构建没有益处后的属性，形成的新属性空间。</li><li><strong>维数（dimensionality）</strong>：一个样本的特征数。（该西瓜的例子维数为3）（当维数非常大时，也就是现在说的“维数灾难”）</li><li><strong>训练集（training set）</strong>：所有训练样本的集合，特殊集合。</li><li><strong>测试集（testing set）</strong>：所有测试样本的集合，一般集合。</li><li><strong>泛化（generalization）</strong>：在训练集上训练好的模型在测试集上的效果，即从特殊到一般的效果。</li><li><strong>独立同分布(i.i.d.)</strong><ul><li>每次抽样之间是没有关系的，不会相互影响</li><li>每次抽样，样本都服从同样的一个分布</li></ul></li></ul><h1 id="a-name-kw-勘误表-a"><a name='kw'>勘误表</a></h1><p>用于订正书中的错误内容</p><p><a href="https://cs.nju.edu.cn/zhouzh/zhouzh.files/publication/MLbook2016.htm">https://cs.nju.edu.cn/zhouzh/zhouzh.files/publication/MLbook2016.htm</a></p><h1 id="a-name-data-数据集-a"><a name='data'>数据集</a></h1><p><a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:复习</title>
      <link href="/2024/04/13/ML-notes/pages/review/"/>
      <url>/2024/04/13/ML-notes/pages/review/</url>
      
        <content type="html"><![CDATA[<p>该页仅为复习资料，内含博客链接均通过搜索得到。</p><h1 id="1-线性回归-linear-regression">1. 线性回归 Linear Regression</h1><p><a href="https://www.cnblogs.com/geo-will/p/10468253.html">https://www.cnblogs.com/geo-will/p/10468253.html</a></p><h2 id="要求1：可以按照自己的理解简述线性回归问题">要求1：可以按照自己的理解简述线性回归问题。</h2><blockquote><p>回归分析是一种预测性的建模技术，它研究的是因变量（目标）和自变量（预测器）之间的关系。线性回归是回归问题中的一种，线性回归假设目标值与特征之间线性相关，即满足一个多元一次方程。通过构建损失函数，来求解损失函数最小时的参数w和b。</p></blockquote><h2 id="要求2：可以对简单数据进行计算">要求2：可以对简单数据进行计算。</h2><blockquote><p>最小二乘法与梯度计算</p></blockquote><blockquote><p>见网页</p></blockquote><h2 id="要求3：-可以编程实现线性回归算法">要求3： 可以编程实现线性回归算法。</h2><blockquote><p>见网页</p></blockquote><h1 id="2-逻辑回归-logistic-regression">2. 逻辑回归 Logistic Regression</h1><p><a href="https://www.cnblogs.com/geo-will/p/10468356.html">https://www.cnblogs.com/geo-will/p/10468356.html</a></p><h2 id="要求1：可以按照自己的理解简述逻辑回归问题以及与线性回归问题的区别与联系">要求1：可以按照自己的理解简述逻辑回归问题以及与线性回归问题的区别与联系。</h2><blockquote><p>逻辑斯蒂回归(Logistic Regression) 虽然名字中有回归，但模型最初是为了解决二分类问题。</p><p>线性回归模型帮助我们用最简单的线性方程实现了对数据的拟合，但只实现了回归而无法进行分类。因此LR就是在线性回归的基础上，构造的一种分类模型。LR 通过一个联系函数，将预测值转化为离散值从而进行分类。对数几率引入了一个对数几率函数（logistic function）,将预测值投影到 0-1 之间，从而将线性回归问题转化为二分类问题。</p></blockquote><blockquote><p>跳转详解 <a href="/2024/04/15/ML-notes/pages/linear-model/" title="ML-notes:线性模型">3.线性模型</a></p></blockquote><h2 id="要求2：掌握梯度下降法-牛顿法的基本原理和迭代公式">要求2：掌握梯度下降法、牛顿法的基本原理和迭代公式。</h2><blockquote><p>跳转详解 <a href="/2024/04/15/ML-notes/pages/linear-model/" title="ML-notes:线性模型">3.线性模型</a></p></blockquote><h2 id="要求3：可以编程实现逻辑回归算法">要求3：可以编程实现逻辑回归算法。</h2><blockquote><p>见网页</p></blockquote><h1 id="3-决策树-decision-tree">3. 决策树 Decision Tree</h1><p><a href="https://www.cnblogs.com/geo-will/p/9773621.html">https://www.cnblogs.com/geo-will/p/9773621.html</a></p><h2 id="要求1：可以按照自己的理解简述决策树算法">要求1：可以按照自己的理解简述决策树算法。</h2><blockquote><p>简单而言，决策树是一个多层if-else函数，对对象属性进行多层if-else判断，获取目标属性的类别。由于只使用if-else对特征属性进行判断，所以一般特征属性为离散值，即使为连续值也会先进行区间离散化，如可以采用二分法（bi-partition）。</p></blockquote><h2 id="要求2：可以利用id3-c4-5-和-cart算法对数据进行分类">要求2：可以利用ID3，C4.5 和 CART算法对数据进行分类。</h2><blockquote><p>ID3 使用信息熵 Ent(D) 得到信息增益 Gain(D,a)，衡量划分属性</p></blockquote><div align=center><img src="/images/ML-pics/4-9.png" /></div><div align=center><img src="/images/ML-pics/4-10.png" /></div><blockquote><p>C4.5 使用增益率 Gain_ratio(D,a)，衡量划分属性</p></blockquote><div align=center><img src="/images/ML-pics/4-18.png" /></div><blockquote><p>CART 使用基尼值 Gini(D) 得到 基尼指数 Gini_index(D,a)，衡量划分属性</p></blockquote><div align=center><img src="/images/ML-pics/4-19.png" /></div><div align=center><img src="/images/ML-pics/4-20.png" /></div><blockquote><p>跳转详解 <a href="/2024/04/15/ML-notes/pages/decision-tree/" title="ML-notes:决策树">4.决策树</a></p></blockquote><h2 id="要求3：可以对生成的决策树进行剪枝处理">要求3：可以对生成的决策树进行剪枝处理。</h2><blockquote><p>4.4 剪枝 跳转详解 <a href="/2024/04/15/ML-notes/pages/decision-tree/" title="ML-notes:决策树">4.决策树</a></p></blockquote><blockquote><p>预剪枝 与 后剪枝</p></blockquote><div align=center><img src="/images/ML-pics/4-23.png" /></div><div align=center><img src="/images/ML-pics/4-24.png" /></div><h1 id="4-感知机-perceptron-神经网络的组成单元">4. 感知机 Perceptron —— 神经网络的组成单元</h1><h2 id="要求1：可以按照自己的理解简述感知机模型">要求1：可以按照自己的理解简述感知机模型。</h2><blockquote><p>感知机（Perceptron） ，最简单的感知机是由两层神经元组成的一个简单模型。</p></blockquote><blockquote><p>感知机是一个接收多个输入信号，输出一个信号的简单模型。它是神经网络的组成单元。</p></blockquote><blockquote><p>它的输出层是M-P神经元，即输出层神经元进行激活函数处理，也称为阈值神经单元（threshold logic unit）；也叫功能神经元。</p></blockquote><blockquote><p>输入层接受外界信号（样本属性）并传递给输出层（输入层的神经元个数等于样本的属性数目），而没有激活函数。</p></blockquote><blockquote><p>多层感知机还有一个层在输出层到输入层之间叫隐含层，隐含层类似于输出层，接收上一层的输出，通过激活函数将值传入下层。</p></blockquote><div align=center><img src="/images/ML-pics/5.3.png" /></div><h2 id="要求2：可以利用感知机解决逻辑分类问题-还不是很懂">要求2：可以利用感知机解决逻辑分类问题。(还不是很懂)</h2><div align=center><img src="/images/ML-pics/ex5.1.png" /></div><div align=center><img src="/images/ML-pics/ex5.2.png" /></div><div align=center><img src="/images/ML-pics/ex5.3.png" /></div><div align=center><img src="/images/ML-pics/ex5.4.png" /></div><h1 id="5-神经网络-neural-networks">5. 神经网络 Neural Networks</h1><p><a href="https://blog.csdn.net/qq_32865355/article/details/80260212">https://blog.csdn.net/qq_32865355/article/details/80260212</a></p><p><a href="https://blog.csdn.net/RAO_OO/article/details/77234524">https://blog.csdn.net/RAO_OO/article/details/77234524</a></p><h2 id="要求1：可以按照自己的理解简述神经网络模型-以及与感知机的关系">要求1：可以按照自己的理解简述神经网络模型，以及与感知机的关系。</h2><blockquote><p>神经网络是由具有<strong>适应性的简单单元</strong>组成的广泛<strong>并行互连的网络</strong>，它的组织能够模拟<strong>生物神经系统</strong>对真实世界物体所做的交互反应。<strong>神经网络中最基本的成分</strong>便是神经元（Neuron）模型，也就是上面说的<strong>适应性简单单元</strong>。</p></blockquote><blockquote><p>感知机由两层神经元组成，是最简单形式的前馈式人工神经网络。</p></blockquote><h2 id="要求2：掌握bp算法的基本原理和迭代公式">要求2：掌握BP算法的基本原理和迭代公式。</h2><blockquote><p>误差反向传播算法简称反向传播算法（即BP算法）。使用反向传播算法的多层感知器又称为BP神经网络。BP算法是一个迭代算法，它的基本思想为：（1）先计算每一层的状态和激活值，直到最后一层（即信号是前向传播的）；（2）计算每一层的误差，误差的计算过程是从最后一层向前推进的（这就是反向传播算法名字的由来）；（3）更新参数（目标是误差变小）。迭代前面两个步骤，直到满足停止准则（比如相邻两次迭代的误差的差别很小）。</p></blockquote><h1 id="6-支持向量机-support-vector-machine">6. 支持向量机 Support Vector Machine</h1><p><a href="https://zhuanlan.zhihu.com/p/77750026">https://zhuanlan.zhihu.com/p/77750026</a></p><p><a href="https://zhuanlan.zhihu.com/p/65487578?from_voters_page=true">https://zhuanlan.zhihu.com/p/65487578?from_voters_page=true</a></p><h2 id="要求1：可以按照自己的理解简述支持向量机模型-以及与其他分类算法的区别">要求1：可以按照自己的理解简述支持向量机模型，以及与其他分类算法的区别。</h2><blockquote><p>支持向量机的基本思想是寻找两类样本之间最中间的超平面。支持向量机的目的是使划分平面对于样本的扰动容忍性好。</p></blockquote><blockquote><p>逻辑回归算法是基于全部样本的二分类器：考虑全部样本的平均似然性。</p><p>支持向量机算法是基于部分样本的二分类器：考虑部分靠近边界的支持向量。</p></blockquote><h2 id="要求2：掌握使用拉格朗日乘子法对约束优化问题进行求解-并理解使用拉格朗日乘子法求解svm问题的原因">要求2：掌握使用拉格朗日乘子法对约束优化问题进行求解，并理解使用拉格朗日乘子法求解SVM问题的原因。</h2><blockquote><p>拉格朗日乘子法是求解约束优化问题常用的方法之一，其基本思想是求解与之等价的无约束对偶问题</p></blockquote><blockquote><p>拉格朗日乘子加入到目标函数中，有两个作用</p><ul><li>将约束函数引入到目标函数中，转化为无约束问题，不满足约束条件的解会使得目标函数无穷大，故而无解</li><li>引入拉格朗日乘子另一个最大的作用就是将约束条件与目标函数混在一起，使得我们可以同时计算目标函数的梯度与约束条件的梯度，根据相关的性质从而找到我们想找到的局部最优解或者全局最优解</li></ul></blockquote><blockquote><p>例子求解: <a href="https://blog.csdn.net/on2way/article/details/47729419">https://blog.csdn.net/on2way/article/details/47729419</a></p></blockquote><h2 id="要求3：可以按照自己的理解简述软间隔支持向量机-并分析其与常规支持向量机的关系与区别">要求3：可以按照自己的理解简述软间隔支持向量机，并分析其与常规支持向量机的关系与区别。</h2><blockquote><p>在实际应用中，完全线性可分的样本是很少的，如果遇到了不能够完全线性可分的样本，我们就有了软间隔，相比于硬间隔的苛刻条件，我们允许个别样本点出现在间隔带里面.</p></blockquote><blockquote><p>我们为每个样本引入一个松弛变量 ε，令 ε<sub>i</sub> &gt; 0 ，且：</p></blockquote><div align=center><img src="/images/ML-pics/L6.1.png" /></div><div align=center><img src="/images/ML-pics/P6.1.png" /></div><blockquote><p>和常规的 SVM 一样，软间隔只是多了个约束，SVM 和 软间隔SVM的对偶问题都有相同的目标函数。</p></blockquote><blockquote><p>特点：</p><ul><li>软间隔SVM可以对有outlier的数据分类。</li><li>软间隔SVM对偶模型与SVM对偶模型非常相似，可以用相同算法求解。</li><li>软间隔SVM模型可以看作是最小化hinge损失函数的正则化模型。</li><li>当参数C趋向无穷大时，软间隔SVM退化成普通的SVM。</li></ul></blockquote><h2 id="要求4：-了解smo算法">要求4： 了解SMO算法。</h2><blockquote><p>SMO(Sequential Minimal Optimization)，序列最小优化算法，其核心思想非常简单：每次只优化一个参数，其他参数先固定住，仅求当前这个优化参数的极值。</p></blockquote><h1 id="7-主成分分析-principle-component-analysis">7. 主成分分析 Principle Component Analysis</h1><p><a href="https://blog.csdn.net/zhongkelee/article/details/44064401">https://blog.csdn.net/zhongkelee/article/details/44064401</a></p><h2 id="要求1：可以按照自己的理解简述主成分分析算法">要求1：可以按照自己的理解简述主成分分析算法。</h2><blockquote><p>当信息维度过多时，对每个指标进行分析往往是孤立的，不是综合的，盲目的减少指标也会损失很多信息，因此我们需要在减少分析指标的同时，还要尽量减少指标包含的信息损失，达到对数据的全面分析。主成分分析 PCA 便是这样一种方法。PCA的思想是将n维特征映射到 k 维上（k &lt; n），这k维是全新的正交特征。我们称之为<strong>主成分</strong>，是重新构造出来的k维特征，而不是简单地从n维特征中去除其余n-k维特征，它包含了与去除的特征之间的关系。</p></blockquote><h2 id="要求2：可以简述pca算法的流程">要求2：可以简述PCA算法的流程。</h2><blockquote><p>整个PCA过程貌似及其简单，就是求协方差的特征值和特征向量，然后做数据转换。</p></blockquote><blockquote><p>网页例子 （1 2 3 45）： <a href="https://blog.csdn.net/zhongkelee/article/details/44064401">https://blog.csdn.net/zhongkelee/article/details/44064401</a></p></blockquote><blockquote><ul><li>Step 1: 中心化 <strong>计算均值差</strong></li><li>Step 2: 计算协方差矩阵 <strong>n*n cov</strong> 𝑪 = 𝐜𝐨𝐯 𝑨 = 𝑨𝑨𝐓</li><li>Step 3: 特征值分解</li><li>Step 4: 投影、降维</li></ul></blockquote><h2 id="要求3：核化pca与pca的相同与不同">要求3：核化PCA与PCA的相同与不同。</h2><blockquote><p>PCA是利用特征的协方差矩阵判断变量间的方差一致性，寻找出变量之间的最佳的线性组合，来代替特征，从而达到降维的目的。</p></blockquote><blockquote><p>KPCA利用核化的思想，将样本的空间映射到更高维度的空间，再利用这个更高的维度空间进行线性降维。</p></blockquote><blockquote><p>对于 KPCA 如果样本的维度是k，样本个数是n（n&gt;k），那么首先需要将样本投射到n维空间，这个n维空间是这样计算的：首先计算n个样本间的距离矩阵D（n*n），核函数F，则F(D)就是他的高维空间投射。</p></blockquote><blockquote><p>核函数还不是很懂。</p></blockquote><h1 id="8-线性判别分析-linear-discriminant-analysis">8. 线性判别分析 Linear Discriminant Analysis</h1><p><a href="https://www.cnblogs.com/pinard/p/6244265.html">https://www.cnblogs.com/pinard/p/6244265.html</a></p><h2 id="要求1：可以按照自己的理解简述线性判别分析算法-并分析其与pca之间的联系与区别">要求1：可以按照自己的理解简述线性判别分析算法，并分析其与PCA之间的联系与区别。</h2><blockquote><p>线性鉴别分析的基本思想是将高维的模式样本投影到最佳鉴别矢量空间，以达到抽取分类信息和压缩特征空间维数的效果，投影后保证模式样本在新的子空间有最大的类间距离和最小的类内距离，即模式在该空间中有最佳的可分离性。因此，它是一种有效的特征抽取方法。使用这种方法能够使投影后模式样本的类间散布矩阵最大，并且同时类内散布矩阵最小。就是说，它能够保证投影后模式样本在新的空间中有最小的类内距离和最大的类间距离，即模式在该空间中有最佳的可分离性。</p></blockquote><blockquote><p>LDA是一种监督学习的降维技术，也就是说它的数据集的每个样本是有类别输出的。这点和PCA不同。PCA是不考虑样本类别输出的无监督降维技术。</p></blockquote><blockquote><p>比较：</p><ul><li><p>思想上：</p><ul><li>PCA旨在寻找一组子坐标系（定义一个子空间）使得样本点的方差最大，即信息量保留越多。</li><li>LDA旨在寻找一组子坐标系（定义一个子空间）使得样本点类内散度小，类间散度大（Fisher Criteria）。</li></ul></li><li><p>监督性：</p><ul><li>PCA是无监督学习方法</li><li>LDA是有监督学习方法</li></ul></li><li><p>算法效率</p><ul><li>PCA效率更胜一筹</li></ul></li><li><p>子空间学习（Subspace Learning）角度：</p><ul><li>PCA与LDA都属于线性子空间学习算法（Linear Subspace Learning）。</li><li>目标都是学习一个投影矩阵𝑊 = [𝒘1, ⋯ , 𝒘𝑚]，使得样本在新坐标系上的表示具有相应特性（PCA——样本方差最大，LDA——同类样本高聚合度，不同类样本高扩散度）。</li><li>在样本空间定义一个新的子坐标系（即子空间），其每个列向量定义一个坐标轴，故此类算法均称为子空间学习算法。</li></ul></li><li><p>降维（Dimension Reduction）角度：</p><ul><li>坐标轴数目少，维度也少了</li></ul></li><li><p>特征提取（Feature Extraction）角度：</p><ul><li>样本在新坐标系下的坐标相当于样本的新特征（Feature，or Representation）</li></ul></li></ul></blockquote><h2 id="要求2：可以简述lda算法的流程">要求2：可以简述LDA算法的流程。</h2><div align=center><img src="/images/ML-pics/P8.1.png" /></div><h1 id="9-k-均值聚类-k-means-clustering">9. K-均值聚类 K-means Clustering</h1><p><a href="https://www.cnblogs.com/pinard/p/6164214.html">https://www.cnblogs.com/pinard/p/6164214.html</a><br><a href="https://www.cnblogs.com/zhxuxu/p/9860654.html">https://www.cnblogs.com/zhxuxu/p/9860654.html</a></p><h2 id="要求1：可以按照自己的理解简述k-means算法">要求1：可以按照自己的理解简述K-means算法。</h2><blockquote><p>K-Means算法的思想很简单，对于给定的样本集，按照样本之间的欧式距离大小，将样本集划分为K个簇。让簇内的点尽量紧密的连在一起，而让簇间的距离（簇中心的距离）尽量的大。</p></blockquote><h2 id="要求2：可以简述lloyd算法的流程">要求2：可以简述Lloyd算法的流程。</h2><blockquote><ul><li>Lloyd’s algorithm 过程：<ul><li>（1）首先在数据集中随机选定k个初始点</li><li>（2） 计算k个站点的Voronoi图。</li><li>（3）整合Voronoi图的每个单元格，并计算<strong>质心</strong>。</li><li>（4）然后将每个站点（k）移动到其Voronoi单元的质心。</li><li>Lloyd’s的输入是一个连续的几何区域，而不是一组离散的点。</li></ul></li></ul></blockquote><div align=center><img src="/images/ML-pics/P9.2.png" /></div><blockquote><p>而可以用Lloyd算法来启发式的求解 K-means</p></blockquote><div align=center><img src="/images/ML-pics/P9.1.png" /></div><blockquote><ul><li>原K-Means算法过程：<ul><li>（1）随机初始化k个聚类中心的位置</li><li>（2）计算每一个点到聚类中心的距离，选取最小值分配给k(i)</li><li>（3）移动聚类中心（其实就是对所属它的样本点求平均值，就是它移动是位置）</li><li>（4）重复（2），（3）直到损失函数（也就是所有样本点到其所归属的样本中心的距离的和最小）</li></ul></li></ul></blockquote><blockquote><p>原 K-means 算法是选取距离最小的样本点作为中心，而 Lloyd 来求解则为每次将质点作为新中心。</p></blockquote><blockquote><p>在 K-Means 聚类时，每个聚类簇的质心是隐含数据。假设 K 个初始化质心，即 EM 算法的 E 步；然后计算得到每个样本最近的质心，并把样本聚类到最近的这个质心，即 EM 算法的 M 步。重复这个 E 步和 M 步，直到质心不再变化为止，这样就完成了 K-Means 聚类。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-notes:目录</title>
      <link href="/2024/04/12/ML-notes/ML-notes/"/>
      <url>/2024/04/12/ML-notes/ML-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="ml-notes">ML-notes</h1><p>本科时期学习过的<strong>机器学习基础课程</strong>，现在重拾。本笔记主要针对清华大学出版的《机器学习》教材而作的笔记，只包括部分内容笔记，作者是南京大学的周志华教授。内容包含了我的复习笔记及其一些浅显理解，仅供借鉴。</p><h2 id="目录-contents">目录 | CONTENTS</h2><h3 id="swig-0"><a href="/2024/04/13/ML-notes/pages/review/" title="ML-notes:复习">0 考试相关复习点</a></h3><h3 id="swig-1"><a href="/2024/04/14/ML-notes/pages/introduction/" title="ML-notes:绪论">1.绪论</a></h3><h3 id="swig-2"><a href="/2024/04/15/ML-notes/pages/model-evaluation/" title="ML-notes:模型评估与选择">2.模型评估与选择</a></h3><h3 id="swig-3"><a href="/2024/04/15/ML-notes/pages/linear-model/" title="ML-notes:线性模型">3.线性模型</a></h3><h3 id="swig-4"><a href="/2024/04/15/ML-notes/pages/decision-tree/" title="ML-notes:决策树">4.决策树</a></h3><h3 id="swig-5"><a href="/2024/04/16/ML-notes/pages/neural-network/" title="ML-notes:人工神经网络">5.神经网络</a></h3><h3 id="6-svm">6.SVM</h3><h3 id="7-pca-lda">7.PCA&amp;LDA</h3><h3 id="8-聚类">8.聚类</h3><h2 id="参考">参考</h2><p>《机器学习》周志华</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
            <tag> ML-notes </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从agrinJPG到SapientialM</title>
      <link href="/2024/04/12/Introduction/SapientialM-s-blog/"/>
      <url>/2024/04/12/Introduction/SapientialM-s-blog/</url>
      
        <content type="html"><![CDATA[<hr><p>Greetings, dear readers!</p><p>Allow me to introduce myself – I am SapientialM, formerly known as AgrinJPG. While my moniker has changed, my passion for technology and sharing knowledge remains unwavering. During my undergraduate years, you might have stumbled upon my contributions on platforms like CSDN, cnblog, and Gitee, where I actively engaged with the vibrant tech community.</p><p>However, life has its twists and turns. After embarking on a professional journey in Shenzhen, I found myself grappling with challenges and setbacks. Yet, adversity often serves as a catalyst for growth. Thus, I’ve embraced a new chapter in my life by delving into the realm of postgraduate studies.</p><p>Now, as I embark on this fresh academic journey, I’ve resurrected my blog – a digital haven where ideas flourish and insights abound. It feels like a rebirth, a chance to reinvent myself and my pursuits.</p><p>My research focus? It lies at the intersection of artificial intelligence and single-cell sequencing. This burgeoning field holds immense promise, offering novel solutions to intricate biological puzzles and advancing our understanding of cellular dynamics.</p><p>If you share a passion for AI, genomics, or the exciting fusion of both, I extend a warm invitation to connect and converse. Let’s embark on this intellectual odyssey together, exchanging ideas, unraveling mysteries, and charting new frontiers in knowledge.</p><p>Welcome to my blog – a sanctuary for the curious, the inquisitive, and the relentless seekers of wisdom.</p><p>Until next time,<br>SapientialM</p><hr><p>From gpt</p>]]></content>
      
      
      
        <tags>
            
            <tag> 新的开始 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
